local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local Camera = workspace.CurrentCamera
local HttpService = game:GetService("HttpService")
local TweenService = game:GetService("TweenService")
local Teams = game:GetService("Teams")

-- Aimbot Key Variables
local aimKey = Enum.UserInputType.MouseButton1
local aimKeyName = "LeftClick"

-- Bhop Variables
local BHOP_JUMP_POWER = 55
local BHOP_AIR_CONTROL = 0.6
local BHOP_MAX_SPEED = 100 -- Increased to allow higher speeds
local JUMP_COOLDOWN = 0.1
local isBhopping = false
local lastJumpTime = 0
local bhopConnection = nil

-- Utility Functions
local function getInputName(input)
    if input:IsA("EnumItem") and input.EnumType == Enum.UserInputType then
        return input.Name:gsub("MouseButton", "Click")
    end
    return tostring(input)
end

-- Save/Load Settings
local function SaveSettings()
    local data = {
        Toggles = Toggles,
        Settings = Settings,
        AimKey = aimKeyName,
        GameFOV = Settings.GameFOV
    }
    pcall(function()
        writefile("UltimateCheatMenu.json", HttpService:JSONEncode(data))
        print("Settings saved")
    end)
end

local function LoadSettings()
    pcall(function()
        if isfile("UltimateCheatMenu.json") then
            local data = HttpService:JSONDecode(readfile("UltimateCheatMenu.json"))
            for k, v in pairs(data.Toggles or {}) do
                Toggles[k] = v
            end
            for k, v in pairs(data.Settings or {}) do
                Settings[k] = v
            end
            if data.AimKey then
                aimKeyName = data.AimKey
                aimKey = (aimKeyName == "LeftClick") and Enum.UserInputType.MouseButton1 or Enum.UserInputType.MouseButton2
            end
            if data.GameFOV then
                Settings.GameFOV = math.clamp(data.GameFOV, 60, 120)
                Camera.FieldOfView = Settings.GameFOV
            end
            print("Settings loaded")
        end
    end)
end

-- Toggles and Settings
local Toggles = {
    NoClip = false,
    InfJump = false,
    Aimbot = false,
    TeamCheck = false,
    BoxESP = false,
    Tracers = false,
    HealthESP = false,
    NamesESP = false,
    DistanceESP = false,
    SpeedHack = false,
    Fly = false,
    JumpBoost = false,
    Invisible = false,
    SpinBot = false,
    GodMode = false,
    AntiAFK = false,
    ESPChams = false,
    SuperJump = false,
    EnemyLineTP = false,
    EnemyTP2_0 = false,
    ShowFOV = false,
    Jerk = false,
    BHOP = false
}
local Settings = {
    FOVSize = 100,
    SpeedScale = 50,
    JumpBoostScale = 50,
    ESPDistance = 2000,
    JumpHeight = 100,
    SpinBotSpeed = 180,
    GameFOV = 70,
    AimbotDistance = 2000,
    BHOPSpeed = 20
}
LoadSettings()

-- Apply saved toggles on load
local function ApplySavedToggles()
    if Toggles.NoClip then ToggleNoClip(true) end
    if Toggles.InfJump then ToggleInfJump(true) end
    if Toggles.Aimbot then ToggleAimbot(true) end
    if Toggles.TeamCheck then ToggleTeamCheck(true) end
    if Toggles.BoxESP then ToggleBoxESP(true) end
    if Toggles.Tracers then ToggleTracers(true) end
    if Toggles.HealthESP then ToggleHealthESP(true) end
    if Toggles.NamesESP then ToggleNamesESP(true) end
    if Toggles.DistanceESP then ToggleDistanceESP(true) end
    if Toggles.SpeedHack then ToggleSpeedHack(true) end
    if Toggles.Fly then ToggleFly(true) end
    if Toggles.JumpBoost then ToggleJumpBoost(true) end
    if Toggles.Invisible then ToggleInvisible(true) end
    if Toggles.SpinBot then ToggleSpinBot(true) end
    if Toggles.GodMode then ToggleGodMode(true) end
    if Toggles.AntiAFK then ToggleAntiAFK(true) end
    if Toggles.ESPChams then ToggleESPChams(true) end
    if Toggles.SuperJump then ToggleSuperJump(true) end
    if Toggles.EnemyLineTP then ToggleEnemyLineTP(true) end
    if Toggles.EnemyTP2_0 then ToggleEnemyTP2_0(true) end
    if Toggles.ShowFOV then ToggleShowFOV(true) end
    if Toggles.Jerk then ToggleJerk(true) end
    if Toggles.BHOP then ToggleBHOP(true) end
end

-- Cleanup Existing Menus
local function CleanupExistingMenus()
    for _, gui in pairs(game.CoreGui:GetChildren()) do
        if gui.Name == "@ReloadingCheatMenu" then
            gui:Destroy()
            print("Removed existing ScreenGui in CoreGui")
        end
    end
    if LocalPlayer.PlayerGui then
        for _, gui in pairs(LocalPlayer.PlayerGui:GetChildren()) do
            if gui.Name == "@ReloadingCheatMenu" then
                gui:Destroy()
                print("Removed existing ScreenGui in PlayerGui")
            end
        end
    end
end
CleanupExistingMenus()

-- GUI Setup
local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Parent = game.CoreGui
ScreenGui.Name = "@ReloadingCheatMenu"
ScreenGui.IgnoreGuiInset = true
ScreenGui.Enabled = true
ScreenGui.ResetOnSpawn = false
print("ScreenGui created:", ScreenGui.Name)

local Connections = {}
local JerkInstance = nil
local function CleanupAll()
    SaveSettings()
    RunService:UnbindFromRenderStep("Aimbot")
    RunService:UnbindFromRenderStep("ForceFOV")
    RunService:UnbindFromRenderStep("SpinBot")
    RunService:UnbindFromRenderStep("NoClip")
    RunService:UnbindFromRenderStep("SpeedHack")
    RunService:UnbindFromRenderStep("Fly")
    RunService:UnbindFromRenderStep("JumpBoost")
    RunService:UnbindFromRenderStep("SuperJump")
    RunService:UnbindFromRenderStep("GodMode")
    RunService:UnbindFromRenderStep("AntiAFK")
    RunService:UnbindFromRenderStep("EnemyLineTP")
    RunService:UnbindFromRenderStep("EnemyTP2_0")
    RunService:UnbindFromRenderStep("FOVFlash")
    RunService:UnbindFromRenderStep("BHOP")
    for player, _ in pairs(ESP) do
        RunService:UnbindFromRenderStep("ESP_" .. player.Name)
    end
    for _, conn in pairs(Connections) do
        pcall(function() conn:Disconnect() end)
    end
    Connections = {}
    if FOVCircle then
        FOVCircle:Remove()
        FOVCircle = nil
    end
    for player, esp in pairs(ESP) do
        for _, obj in pairs(esp) do
            pcall(function() obj:Remove() end)
        end
    end
    ESP = {}
    for _, hl in pairs(highlights) do
        pcall(function() hl:Destroy() end)
    end
    highlights = {}
    if LocalPlayer.Character then
        for _, part in pairs(LocalPlayer.Character:GetDescendants()) do
            if part:IsA("BasePart") then part.CanCollide = true end
            if part:IsA("BasePart") or part:IsA("Decal") then part.Transparency = 0 end
        end
        local humanoid = LocalPlayer.Character:FindFirstChild("Humanoid")
        if humanoid then
            humanoid.WalkSpeed = 16
            humanoid.JumpPower = 50
        end
    end
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local root = player.Character.HumanoidRootPart
            pcall(function()
                root.Anchored = false
                if player.Character:FindFirstChild("Humanoid") then
                    player.Character.Humanoid.WalkSpeed = 16
                    player.Character.Humanoid.JumpPower = 50
                end
            end)
        end
    end
    JerkInstance = nil
    ScreenGui:Destroy()
    print("Cheat fully closed and resources cleaned up")
end

-- Main Frame
local MainFrame = Instance.new("Frame")
MainFrame.Size = UDim2.new(0, 700, 0, 500)
MainFrame.Position = UDim2.new(0.5, -350, 0.5, -250)
MainFrame.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
MainFrame.BorderSizePixel = 0
MainFrame.Active = true
MainFrame.Draggable = true
MainFrame.Visible = true
MainFrame.Parent = ScreenGui

local MainCorner = Instance.new("UICorner")
MainCorner.CornerRadius = UDim.new(0, 12)
MainCorner.Parent = MainFrame

local MainGradient = Instance.new("UIGradient")
MainGradient.Color = ColorSequence.new{
    ColorSequenceKeypoint.new(0, Color3.fromRGB(30, 30, 30)),
    ColorSequenceKeypoint.new(1, Color3.fromRGB(10, 10, 10))
}
MainGradient.Rotation = 90
MainGradient.Parent = MainFrame

local MainStroke = Instance.new("UIStroke")
MainStroke.Color = Color3.fromRGB(255, 70, 70)
MainStroke.Transparency = 0.5
MainStroke.Thickness = 1.5
MainStroke.Parent = MainFrame

local Title = Instance.new("TextLabel")
Title.Size = UDim2.new(1, 0, 0, 50)
Title.BackgroundTransparency = 1
Title.Text = "@Reloading :) - Premium Cheat Menu"
Title.TextColor3 = Color3.fromRGB(255, 70, 70)
Title.TextSize = 26
Title.Font = Enum.Font.GothamBlack
Title.Parent = MainFrame
Title.TextXAlignment = Enum.TextXAlignment.Left

local TitlePadding = Instance.new("UIPadding")
TitlePadding.PaddingLeft = UDim.new(0, 20)
TitlePadding.Parent = Title

local CloseButton = Instance.new("TextButton")
CloseButton.Size = UDim2.new(0, 40, 0, 40)
CloseButton.Position = UDim2.new(1, -50, 0, 5)
CloseButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
CloseButton.Text = "X"
CloseButton.TextColor3 = Color3.fromRGB(255, 255, 255)
CloseButton.TextSize = 20
CloseButton.Font = Enum.Font.GothamBold
CloseButton.Parent = MainFrame
CloseButton.MouseButton1Click:Connect(CleanupAll)

local CloseCorner = Instance.new("UICorner")
CloseCorner.CornerRadius = UDim.new(0, 8)
CloseCorner.Parent = CloseButton

local CloseGradient = Instance.new("UIGradient")
CloseGradient.Color = ColorSequence.new{
    ColorSequenceKeypoint.new(0, Color3.fromRGB(70, 70, 70)),
    ColorSequenceKeypoint.new(1, Color3.fromRGB(40, 40, 40))
}
CloseGradient.Parent = CloseButton

CloseButton.MouseEnter:Connect(function()
    TweenService:Create(CloseButton, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(80, 80, 80)}):Play()
end)
CloseButton.MouseLeave:Connect(function()
    TweenService:Create(CloseButton, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(50, 50, 50)}):Play()
end)

local MinimizeButton = Instance.new("TextButton")
MinimizeButton.Size = UDim2.new(0, 40, 0, 40)
MinimizeButton.Position = UDim2.new(1, -100, 0, 5)
MinimizeButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
MinimizeButton.Text = "-"
MinimizeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
MinimizeButton.TextSize = 20
MinimizeButton.Font = Enum.Font.GothamBold
MinimizeButton.Parent = MainFrame

local isMinimized = false
MinimizeButton.MouseButton1Click:Connect(function()
    isMinimized = not isMinimized
    MinimizeButton.Text = isMinimized and "+" or "-"
    local targetSize = isMinimized and UDim2.new(0, 700, 0, 50) or UDim2.new(0, 700, 0, 500)
    TweenService:Create(MainFrame, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Size = targetSize}):Play()
    for _, page in pairs(Pages) do
        page.Visible = isMinimized and false or (page == Pages[ActiveTab] and true or false)
    end
    SaveSettings()
end)

local MinimizeCorner = Instance.new("UICorner")
MinimizeCorner.CornerRadius = UDim.new(0, 8)
MinimizeCorner.Parent = MinimizeButton

local MinimizeGradient = Instance.new("UIGradient")
MinimizeGradient.Color = ColorSequence.new{
    ColorSequenceKeypoint.new(0, Color3.fromRGB(70, 70, 70)),
    ColorSequenceKeypoint.new(1, Color3.fromRGB(40, 40, 40))
}
MinimizeGradient.Parent = MinimizeButton

MinimizeButton.MouseEnter:Connect(function()
    TweenService:Create(MinimizeButton, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(80, 80, 80)}):Play()
end)
MinimizeButton.MouseLeave:Connect(function()
    TweenService:Create(MinimizeButton, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(50, 50, 50)}):Play()
end)

-- Toggle Menu with RightShift
local MenuToggleConnection
MenuToggleConnection = UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if not gameProcessed and input.KeyCode == Enum.KeyCode.RightShift then
        MainFrame.Visible = not MainFrame.Visible
        if MainFrame.Visible then
            local tween = TweenService:Create(MainFrame, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.In), {BackgroundTransparency = 0})
            tween:Play()
        else
            local tween = TweenService:Create(MainFrame, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.In), {BackgroundTransparency = 0.5})
            tween:Play()
        end
        SaveSettings()
    end
end)
table.insert(Connections, MenuToggleConnection)

-- Side Bar for Tabs
local SideBar = Instance.new("Frame")
SideBar.Size = UDim2.new(0, 150, 1, -60)
SideBar.Position = UDim2.new(0, 10, 0, 60)
SideBar.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
SideBar.Parent = MainFrame

local SideBarCorner = Instance.new("UICorner")
SideBarCorner.CornerRadius = UDim.new(0, 8)
SideBarCorner.Parent = SideBar

local SideBarGradient = Instance.new("UIGradient")
SideBarGradient.Color = ColorSequence.new{
    ColorSequenceKeypoint.new(0, Color3.fromRGB(40, 40, 40)),
    ColorSequenceKeypoint.new(1, Color3.fromRGB(20, 20, 20))
}
SideBarGradient.Parent = SideBar

local SideBarLayout = Instance.new("UIListLayout")
SideBarLayout.SortOrder = Enum.SortOrder.LayoutOrder
SideBarLayout.Padding = UDim.new(0, 10)
SideBarLayout.Parent = SideBar

local SideBarPadding = Instance.new("UIPadding")
SideBarPadding.PaddingTop = UDim.new(0, 10)
SideBarPadding.PaddingLeft = UDim.new(0, 10)
SideBarPadding.Parent = SideBar

local ContentFrame = Instance.new("Frame")
ContentFrame.Size = UDim2.new(1, -180, 1, -60)
ContentFrame.Position = UDim2.new(0, 170, 0, 60)
ContentFrame.BackgroundTransparency = 1
ContentFrame.Parent = MainFrame

local Pages = {}
local ActiveTab = nil
local function CreateTab(name)
    local TabButton = Instance.new("TextButton")
    TabButton.Size = UDim2.new(1, 0, 0, 40)
    TabButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    TabButton.Text = name
    TabButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    TabButton.TextSize = 18
    TabButton.Font = Enum.Font.GothamBold
    TabButton.Parent = SideBar

    local ButtonCorner = Instance.new("UICorner")
    ButtonCorner.CornerRadius = UDim.new(0, 8)
    ButtonCorner.Parent = TabButton

    local ButtonGradient = Instance.new("UIGradient")
    ButtonGradient.Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0, Color3.fromRGB(70, 70, 70)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(40, 40, 40))
    }
    ButtonGradient.Parent = TabButton

    local ButtonStroke = Instance.new("UIStroke")
    ButtonStroke.Color = Color3.fromRGB(255, 70, 70)
    ButtonStroke.Transparency = 0.8
    ButtonStroke.Thickness = 1
    ButtonStroke.Parent = TabButton

    local Page = Instance.new("ScrollingFrame")
    Page.Size = UDim2.new(1, 0, 1, 0)
    Page.BackgroundTransparency = 1
    Page.ScrollBarThickness = 4
    Page.ScrollBarImageColor3 = Color3.fromRGB(255, 70, 70)
    Page.CanvasSize = UDim2.new(0, 0, 0, 0)
    Page.Visible = false
    Page.Parent = ContentFrame

    local PageLayout = Instance.new("UIListLayout")
    PageLayout.SortOrder = Enum.SortOrder.LayoutOrder
    PageLayout.Padding = UDim.new(0, 10)
    PageLayout.Parent = Page

    local PagePadding = Instance.new("UIPadding")
    PagePadding.PaddingLeft = UDim.new(0, 10)
    PagePadding.PaddingRight = UDim.new(0, 10)
    PagePadding.PaddingTop = UDim.new(0, 10)
    PagePadding.Parent = Page

    Pages[name] = Page
    TabButton.MouseButton1Click:Connect(function()
        for _, page in pairs(Pages) do page.Visible = false end
        Page.Visible = not isMinimized
        ActiveTab = name
        for _, tab in pairs(SideBar:GetChildren()) do
            if tab:IsA("TextButton") then
                tab.BackgroundColor3 = (tab.Text == name) and Color3.fromRGB(80, 80, 80) or Color3.fromRGB(50, 50, 50)
                tab.UIStroke.Transparency = (tab.Text == name) and 0.2 or 0.8
            end
        end
        SaveSettings()
    end)

    TabButton.MouseEnter:Connect(function()
        if TabButton.Text ~= name then
            TweenService:Create(TabButton, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(60, 60, 60)}):Play()
        end
    end)
    TabButton.MouseLeave:Connect(function()
        if TabButton.Text ~= name then
            TweenService:Create(TabButton, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(50, 50, 50)}):Play()
        end
    end)

    if not ActiveTab then
        ActiveTab = name
        Page.Visible = true
        TabButton.BackgroundColor3 = Color3.fromRGB(80, 80, 80)
        TabButton.UIStroke.Transparency = 0.2
    end

    return Page
end

-- Utility Functions for UI
local function CreateToggle(parent, name, callback)
    local ToggleFrame = Instance.new("Frame")
    ToggleFrame.Size = UDim2.new(1, 0, 0, 40)
    ToggleFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    ToggleFrame.Parent = parent

    local ToggleCorner = Instance.new("UICorner")
    ToggleCorner.CornerRadius = UDim.new(0, 8)
    ToggleCorner.Parent = ToggleFrame

    local ToggleGradient = Instance.new("UIGradient")
    ToggleGradient.Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0, Color3.fromRGB(40, 40, 40)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(25, 25, 25))
    }
    ToggleGradient.Parent = ToggleFrame

    local ToggleStroke = Instance.new("UIStroke")
    ToggleStroke.Color = Color3.fromRGB(255, 70, 70)
    ToggleStroke.Transparency = 0.7
    ToggleStroke.Thickness = 1
    ToggleStroke.Parent = ToggleFrame

    local ToggleLabel = Instance.new("TextLabel")
    ToggleLabel.Size = UDim2.new(0.7, 0, 1, 0)
    ToggleLabel.BackgroundTransparency = 1
    ToggleLabel.Text = name
    ToggleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    ToggleLabel.TextSize = 16
    ToggleLabel.Font = Enum.Font.GothamBold
    ToggleLabel.TextXAlignment = Enum.TextXAlignment.Left
    ToggleLabel.Parent = ToggleFrame

    local LabelPadding = Instance.new("UIPadding")
    LabelPadding.PaddingLeft = UDim.new(0, 10)
    LabelPadding.Parent = ToggleLabel

    local ToggleSwitch = Instance.new("Frame")
    ToggleSwitch.Size = UDim2.new(0, 50, 0, 25)
    ToggleSwitch.Position = UDim2.new(1, -60, 0.5, -12.5)
    ToggleSwitch.BackgroundColor3 = Toggles[name] and Color3.fromRGB(0, 200, 0) or Color3.fromRGB(200, 0, 0)
    ToggleSwitch.Parent = ToggleFrame

    local SwitchCorner = Instance.new("UICorner")
    SwitchCorner.CornerRadius = UDim.new(0, 12)
    SwitchCorner.Parent = ToggleSwitch

    local SwitchKnob = Instance.new("Frame")
    SwitchKnob.Size = UDim2.new(0, 25, 0, 25)
    SwitchKnob.Position = Toggles[name] and UDim2.new(1, -25, 0, 0) or UDim2.new(0, 0, 0, 0)
    SwitchKnob.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    SwitchKnob.Parent = ToggleSwitch

    local KnobCorner = Instance.new("UICorner")
    KnobCorner.CornerRadius = UDim.new(0, 12)
    KnobCorner.Parent = SwitchKnob

    local ToggleButton = Instance.new("TextButton")
    ToggleButton.Size = UDim2.new(1, 0, 1, 0)
    ToggleButton.BackgroundTransparency = 1
    ToggleButton.Text = ""
    ToggleButton.Parent = ToggleFrame
    ToggleButton.MouseButton1Click:Connect(function()
        Toggles[name] = not Toggles[name]
        local targetColor = Toggles[name] and Color3.fromRGB(0, 200, 0) or Color3.fromRGB(200, 0, 0)
        local targetPos = Toggles[name] and UDim2.new(1, -25, 0, 0) or UDim2.new(0, 0, 0, 0)
        TweenService:Create(ToggleSwitch, TweenInfo.new(0.2), {BackgroundColor3 = targetColor}):Play()
        TweenService:Create(SwitchKnob, TweenInfo.new(0.2), {Position = targetPos}):Play()
        pcall(callback, Toggles[name])
        SaveSettings()
    end)
    parent.CanvasSize = UDim2.new(0, 0, 0, parent.UIListLayout.AbsoluteContentSize.Y + 20)
end

local function CreateSlider(parent, name, min, max, default, callback)
    local SliderFrame = Instance.new("Frame")
    SliderFrame.Size = UDim2.new(1, 0, 0, 60)
    SliderFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    SliderFrame.Parent = parent

    local SliderCorner = Instance.new("UICorner")
    SliderCorner.CornerRadius = UDim.new(0, 8)
    SliderCorner.Parent = SliderFrame

    local SliderGradient = Instance.new("UIGradient")
    SliderGradient.Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0, Color3.fromRGB(40, 40, 40)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(25, 25, 25))
    }
    SliderGradient.Parent = SliderFrame

    local SliderStroke = Instance.new("UIStroke")
    SliderStroke.Color = Color3.fromRGB(255, 70, 70)
    SliderStroke.Transparency = 0.7
    SliderStroke.Thickness = 1
    SliderStroke.Parent = SliderFrame

    local Label = Instance.new("TextLabel")
    Label.Size = UDim2.new(1, 0, 0, 25)
    Label.BackgroundTransparency = 1
    Label.Text = name .. ": " .. default
    Label.TextColor3 = Color3.fromRGB(255, 255, 255)
    Label.TextSize = 16
    Label.Font = Enum.Font.GothamBold
    Label.TextXAlignment = Enum.TextXAlignment.Left
    Label.Parent = SliderFrame

    local LabelPadding = Instance.new("UIPadding")
    LabelPadding.PaddingLeft = UDim.new(0, 10)
    LabelPadding.Parent = Label

    local SliderBar = Instance.new("Frame")
    SliderBar.Size = UDim2.new(1, -20, 0, 8)
    SliderBar.Position = UDim2.new(0, 10, 0, 35)
    SliderBar.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    SliderBar.Parent = SliderFrame

    local BarCorner = Instance.new("UICorner")
    BarCorner.CornerRadius = UDim.new(0, 4)
    BarCorner.Parent = SliderBar

    local Fill = Instance.new("Frame")
    Fill.Size = UDim2.new((default - min) / (max - min), 0, 1, 0)
    Fill.BackgroundColor3 = Color3.fromRGB(255, 70, 70)
    Fill.Parent = SliderBar

    local FillCorner = Instance.new("UICorner")
    FillCorner.CornerRadius = UDim.new(0, 4)
    FillCorner.Parent = Fill

    local SliderButton = Instance.new("TextButton")
    SliderButton.Size = UDim2.new(1, 0, 1, 0)
    SliderButton.BackgroundTransparency = 1
    SliderButton.Text = ""
    SliderButton.Parent = SliderBar

    SliderButton.MouseButton1Down:Connect(function()
        local connection
        connection = UserInputService.InputChanged:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseMovement then
                local mouseX = input.Position.X
                local sliderX = SliderBar.AbsolutePosition.X
                local sliderWidth = SliderBar.AbsoluteSize.X
                local relative = math.clamp((mouseX - sliderX) / sliderWidth, 0, 1)
                local value = math.floor(min + (max - min) * relative)
                Settings[name] = value
                Label.Text = name .. ": " .. value
                Fill.Size = UDim2.new(relative, 0, 1, 0)
                pcall(callback, value)
                SaveSettings()
            end
        end)
        local endConn = UserInputService.InputEnded:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                connection:Disconnect()
                endConn:Disconnect()
            end
        end)
        table.insert(Connections, connection)
        table.insert(Connections, endConn)
    end)
    parent.CanvasSize = UDim2.new(0, 0, 0, parent.UIListLayout.AbsoluteContentSize.Y + 20)
end

local function CreateFOVSlider(parent, name, default, callback)
    local SliderFrame = Instance.new("Frame")
    SliderFrame.Size = UDim2.new(1, 0, 0, 60)
    SliderFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    SliderFrame.Parent = parent

    local SliderCorner = Instance.new("UICorner")
    SliderCorner.CornerRadius = UDim.new(0, 8)
    SliderCorner.Parent = SliderFrame

    local SliderGradient = Instance.new("UIGradient")
    SliderGradient.Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0, Color3.fromRGB(40, 40, 40)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(25, 25, 25))
    }
    SliderGradient.Parent = SliderFrame

    local SliderStroke = Instance.new("UIStroke")
    SliderStroke.Color = Color3.fromRGB(255, 70, 70)
    SliderStroke.Transparency = 0.7
    SliderStroke.Thickness = 1
    SliderStroke.Parent = SliderFrame

    local Label = Instance.new("TextLabel")
    Label.Size = UDim2.new(0.6, 0, 0, 25)
    Label.BackgroundTransparency = 1
    Label.Text = name .. ": " .. default
    Label.TextColor3 = Color3.fromRGB(255, 255, 255)
    Label.TextSize = 16
    Label.Font = Enum.Font.GothamBold
    Label.TextXAlignment = Enum.TextXAlignment.Left
    Label.Parent = SliderFrame

    local LabelPadding = Instance.new("UIPadding")
    LabelPadding.PaddingLeft = UDim.new(0, 10)
    LabelPadding.Parent = Label

    local ValueBox = Instance.new("TextBox")
    ValueBox.Size = UDim2.new(0.3, 0, 0, 25)
    ValueBox.Position = UDim2.new(0.7, 0, 0, 0)
    ValueBox.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    ValueBox.Text = tostring(default)
    ValueBox.TextColor3 = Color3.fromRGB(255, 255, 255)
    ValueBox.TextSize = 16
    ValueBox.Font = Enum.Font.GothamBold
    ValueBox.Parent = SliderFrame

    local ValueBoxCorner = Instance.new("UICorner")
    ValueBoxCorner.CornerRadius = UDim.new(0, 8)
    ValueBoxCorner.Parent = ValueBox

    local SliderBar = Instance.new("Frame")
    SliderBar.Size = UDim2.new(1, -20, 0, 8)
    SliderBar.Position = UDim2.new(0, 10, 0, 35)
    SliderBar.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    SliderBar.Parent = SliderFrame

    local BarCorner = Instance.new("UICorner")
    BarCorner.CornerRadius = UDim.new(0, 4)
    BarCorner.Parent = SliderBar

    local Fill = Instance.new("Frame")
    Fill.Size = UDim2.new((default - 60) / (120 - 60), 0, 1, 0)
    Fill.BackgroundColor3 = Color3.fromRGB(255, 70, 70)
    Fill.Parent = SliderBar

    local FillCorner = Instance.new("UICorner")
    FillCorner.CornerRadius = UDim.new(0, 4)
    FillCorner.Parent = Fill

    local SliderButton = Instance.new("TextButton")
    SliderButton.Size = UDim2.new(1, 0, 1, 0)
    SliderButton.BackgroundTransparency = 1
    SliderButton.Text = ""
    SliderButton.Parent = SliderBar

    local function updateFromSlider()
        local connection
        connection = UserInputService.InputChanged:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseMovement then
                local mouseX = input.Position.X
                local sliderX = SliderBar.AbsolutePosition.X
                local sliderWidth = SliderBar.AbsoluteSize.X
                local relative = math.clamp((mouseX - sliderX) / sliderWidth, 0, 1)
                local value = math.floor(60 + (120 - 60) * relative)
                Settings[name] = value
                Label.Text = name .. ": " .. value
                ValueBox.Text = tostring(value)
                Fill.Size = UDim2.new(relative, 0, 1, 0)
                pcall(callback, value)
                SaveSettings()
            end
        end)
        local endConn = UserInputService.InputEnded:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                connection:Disconnect()
                endConn:Disconnect()
            end
        end)
        table.insert(Connections, connection)
        table.insert(Connections, endConn)
    end

    SliderButton.MouseButton1Down:Connect(updateFromSlider)

    ValueBox.FocusLost:Connect(function(enterPressed)
        if enterPressed then
            local value = tonumber(ValueBox.Text)
            if value then
                value = math.clamp(value, 60, 120)
                Settings[name] = value
                Label.Text = name .. ": " .. value
                Fill.Size = UDim2.new((value - 60) / (120 - 60), 0, 1, 0)
                pcall(callback, value)
                SaveSettings()
            else
                ValueBox.Text = tostring(Settings[name])
            end
        end
    end)
    parent.CanvasSize = UDim2.new(0, 0, 0, parent.UIListLayout.AbsoluteContentSize.Y + 20)
end

-- Create Pages
local CombatPage = CreateTab("Combat")
local MovementPage = CreateTab("Movement")
local VisualsPage = CreateTab("Visuals")
local MiscPage = CreateTab("Misc")
print("Tabs created")

-- BHOP Logic
local function ToggleBHOP(state)
    Toggles.BHOP = state
    if state then
        bhopConnection = RunService:BindToRenderStep("BHOP", Enum.RenderPriority.Character.Value + 1, function(deltaTime)
            pcall(function()
                if not Toggles.BHOP then return end
                local character = LocalPlayer.Character
                if not character then return end
                local humanoid = character:FindFirstChild("Humanoid")
                local rootPart = character:FindFirstChild("HumanoidRootPart")
                if not humanoid or not rootPart then return end

                humanoid.JumpPower = BHOP_JUMP_POWER

                if isBhopping and humanoid.FloorMaterial ~= Enum.Material.Air and tick() - lastJumpTime > JUMP_COOLDOWN then
                    humanoid.Jump = true
                    lastJumpTime = tick()

                    local moveDirection = humanoid.MoveDirection
                    if moveDirection.Magnitude > 0 then
                        local velocity = rootPart.Velocity
                        local speedBoost = moveDirection * Settings.BHOPSpeed -- Direct scaling for stronger effect
                        local newVelocity = Vector3.new(
                            math.clamp(velocity.X + speedBoost.X, -BHOP_MAX_SPEED, BHOP_MAX_SPEED),
                            velocity.Y,
                            math.clamp(velocity.Z + speedBoost.Z, -BHOP_MAX_SPEED, BHOP_MAX_SPEED)
                        )
                        rootPart.Velocity = newVelocity
                    end
                end

                if humanoid.FloorMaterial == Enum.Material.Air then
                    local moveDirection = humanoid.MoveDirection
                    if moveDirection.Magnitude > 0 then
                        local currentVelocity = rootPart.Velocity
                        local airAdjust = moveDirection * (Settings.BHOPSpeed / 25) * BHOP_AIR_CONTROL * deltaTime * 100 -- Amplify air control
                        rootPart.Velocity = Vector3.new(
                            math.clamp(currentVelocity.X + airAdjust.X, -BHOP_MAX_SPEED, BHOP_MAX_SPEED),
                            currentVelocity.Y,
                            math.clamp(currentVelocity.Z + airAdjust.Z, -BHOP_MAX_SPEED, BHOP_MAX_SPEED)
                        )
                    end
                end
            end)
        end)

        local inputBeganConn = UserInputService.InputBegan:Connect(function(input, gameProcessed)
            if input.KeyCode == Enum.KeyCode.Space and not gameProcessed then
                isBhopping = true
            end
        end)
        local inputEndedConn = UserInputService.InputEnded:Connect(function(input)
            if input.KeyCode == Enum.KeyCode.Space then
                isBhopping = false
            end
        end)
        table.insert(Connections, inputBeganConn)
        table.insert(Connections, inputEndedConn)
    else
        RunService:UnbindFromRenderStep("BHOP")
        bhopConnection = nil
        isBhopping = false
        if LocalPlayer.Character then
            local humanoid = LocalPlayer.Character:FindFirstChild("Humanoid")
            if humanoid then
                humanoid.JumpPower = 50
            end
        end
    end
    SaveSettings()
end

-- GameFOV Update
local function UpdateGameFOV(value)
    Settings.GameFOV = math.clamp(value, 60, 120)
    Camera.FieldOfView = Settings.GameFOV
    SaveSettings()
    print("GameFOV set to", Settings.GameFOV)
end
Camera.FieldOfView = Settings.GameFOV
RunService:BindToRenderStep("ForceFOV", Enum.RenderPriority.Camera.Value, function()
    if Camera.FieldOfView ~= Settings.GameFOV then
        Camera.FieldOfView = Settings.GameFOV
    end
end)

-- Team Check
local function hasTeams()
    return #Teams:GetTeams() > 0 and LocalPlayer.Team ~= nil
end

-- Aimbot
local FOVCircle = Drawing.new("Circle")
FOVCircle.Visible = false
FOVCircle.Radius = Settings.FOVSize
FOVCircle.Thickness = 2
FOVCircle.Position = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
FOVCircle.Filled = false

local lastTarget = nil
local function ToggleAimbot(state)
    Toggles.Aimbot = state
    FOVCircle.Visible = state and Toggles.ShowFOV
    if state then
        RunService:BindToRenderStep("Aimbot", Enum.RenderPriority.Camera.Value + 1, function(deltaTime)
            pcall(function()
                if not Toggles.Aimbot or not UserInputService:IsMouseButtonPressed(aimKey) then
                    lastTarget = nil
                    return
                end
                if not LocalPlayer.Character or not LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                    lastTarget = nil
                    return
                end
                local closest, closestDist = nil, Settings.FOVSize
                for _, player in pairs(Players:GetPlayers()) do
                    if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("Head") and player.Character:FindFirstChild("Humanoid") and player.Character.Humanoid.Health > 0 then
                        local isEnemy = not Toggles.TeamCheck or not hasTeams() or player.Team ~= LocalPlayer.Team
                        if isEnemy then
                            local headPos, onScreen = Camera:WorldToViewportPoint(player.Character.Head.Position)
                            local dist3D = (LocalPlayer.Character.HumanoidRootPart.Position - player.Character.Head.Position).Magnitude
                            if onScreen and dist3D <= Settings.AimbotDistance then
                                local dist2D = (Vector2.new(headPos.X, headPos.Y) - Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)).Magnitude
                                if dist2D < closestDist then
                                    closest = player.Character.Head
                                    closestDist = dist2D
                                end
                            end
                        end
                    end
                end
                if closest then
                    if lastTarget ~= closest then
                        lastTarget = closest
                        print("New target acquired:", closest.Parent.Name)
                    end
                    local targetCFrame = CFrame.new(Camera.CFrame.Position, closest.Position)
                    Camera.CFrame = targetCFrame
                    print("Aimbot targeting", closest.Parent.Name, "Distance to FOV:", closestDist)
                else
                    lastTarget = nil
                end
            end)
        end)
        RunService:BindToRenderStep("FOVFlash", Enum.RenderPriority.Camera.Value + 2, function()
            if Toggles.ShowFOV then
                local hue = (tick() % 5) / 5
                local color = Color3.fromHSV(hue, 1, 1)
                FOVCircle.Color = color
            end
        end)
    else
        RunService:UnbindFromRenderStep("Aimbot")
        RunService:UnbindFromRenderStep("FOVFlash")
        FOVCircle.Visible = false
        lastTarget = nil
        print("Aimbot disabled")
    end
    SaveSettings()
end

local FOVUpdateConnection
FOVUpdateConnection = RunService.RenderStepped:Connect(function()
    pcall(function()
        FOVCircle.Position = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
        FOVCircle.Radius = Settings.FOVSize
        FOVCircle.Visible = Toggles.Aimbot and Toggles.ShowFOV
    end)
end)
table.insert(Connections, FOVUpdateConnection)

local function ToggleShowFOV(state)
    Toggles.ShowFOV = state
    FOVCircle.Visible = Toggles.Aimbot and state
    SaveSettings()
    print("ShowFOV set to", state)
end

-- Enemy Line TP
local function ToggleEnemyLineTP(state)
    if state then
        RunService:BindToRenderStep("EnemyLineTP", Enum.RenderPriority.Character.Value + 1, function()
            pcall(function()
                if not Toggles.EnemyLineTP then return end
                local myChar = LocalPlayer.Character
                if not myChar or not myChar:FindFirstChild("HumanoidRootPart") or not myChar:FindFirstChild("Humanoid") or myChar.Humanoid.Health <= 0 then
                    return
                end
                local myRoot = myChar.HumanoidRootPart
                local myCFrame = myRoot.CFrame
                local lookVector = myCFrame.LookVector * Vector3.new(1, 0, 1)
                local offset = 1
                for _, player in ipairs(Players:GetPlayers()) do
                    if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("Humanoid") and player.Character:FindFirstChild("HumanoidRootPart") and player.Character.Humanoid.Health > 0 then
                        local isEnemy = not Toggles.TeamCheck or not hasTeams() or player.Team ~= LocalPlayer.Team
                        if isEnemy then
                            local root = player.Character.HumanoidRootPart
                            local targetPos = myCFrame.Position + (lookVector * (5 + offset * 5))
                            targetPos = Vector3.new(targetPos.X, myCFrame.Position.Y, targetPos.Z)
                            root.CFrame = CFrame.new(targetPos, targetPos + lookVector)
                            root.Anchored = true
                            player.Character.Humanoid.WalkSpeed = 0
                            player.Character.Humanoid.JumpPower = 0
                            offset = offset + 1
                        end
                    end
                end
            end)
            task.wait(1.5)
        end)
    else
        RunService:UnbindFromRenderStep("EnemyLineTP")
        for _, player in ipairs(Players:GetPlayers()) do
            if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                local root = player.Character.HumanoidRootPart
                root.Anchored = false
                if player.Character:FindFirstChild("Humanoid") then
                    player.Character.Humanoid.WalkSpeed = 16
                    player.Character.Humanoid.JumpPower = 50
                end
            end
        end
    end
    SaveSettings()
end

-- EnemyTP2.0
local function isValidCharacter(player)
    return player.Character and player.Character:FindFirstChild("HumanoidRootPart") and player.Character:FindFirstChild("Humanoid") and player.Character.Humanoid.Health > 0
end

local function teleportAndFreeze()
    if not LocalPlayer.Character or not LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
        return
    end
    local myCFrame = LocalPlayer.Character.HumanoidRootPart.CFrame
    local forwardOffset = myCFrame.LookVector * 5
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and isValidCharacter(player) then
            local isEnemy = not Toggles.TeamCheck or not hasTeams() or player.Team ~= LocalPlayer.Team
            if isEnemy then
                pcall(function()
                    player.Character.HumanoidRootPart.CFrame = CFrame.new(myCFrame.Position + forwardOffset + Vector3.new(math.random(-2, 2), 0, math.random(-1, 1)))
                    player.Character.Humanoid.WalkSpeed = 0
                    player.Character.Humanoid.JumpPower = 0
                end)
            end
        end
    end
end

local function unfreezePlayers()
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and isValidCharacter(player) then
            pcall(function()
                player.Character.Humanoid.WalkSpeed = 16
                player.Character.Humanoid.JumpPower = 50
            end)
        end
    end
end

local function ToggleEnemyTP2_0(state)
    if state then
        RunService:BindToRenderStep("EnemyTP2_0", Enum.RenderPriority.Character.Value + 1, teleportAndFreeze)
    else
        RunService:UnbindFromRenderStep("EnemyTP2_0")
        unfreezePlayers()
    end
    SaveSettings()
end

-- Spin Bot
local function ToggleSpinBot(state)
    if state then
        RunService:BindToRenderStep("SpinBot", Enum.RenderPriority.Character.Value + 1, function()
            pcall(function()
                if not Toggles.SpinBot then return end
                local root = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
                if root then
                    root.CFrame = root.CFrame * CFrame.Angles(0, math.rad(Settings.SpinBotSpeed), 0)
                end
            end)
        end)
    else
        RunService:UnbindFromRenderStep("SpinBot")
    end
    SaveSettings()
end

-- NoClip
local function ToggleNoClip(state)
    if state then
        RunService:BindToRenderStep("NoClip", Enum.RenderPriority.Character.Value + 1, function()
            pcall(function()
                if LocalPlayer.Character and Toggles.NoClip then
                    for _, part in pairs(LocalPlayer.Character:GetDescendants()) do
                        if part:IsA("BasePart") then
                            part.CanCollide = false
                        end
                    end
                end
            end)
        end)
    else
        RunService:UnbindFromRenderStep("NoClip")
        if LocalPlayer.Character then
            for _, part in pairs(LocalPlayer.Character:GetDescendants()) do
                if part:IsA("BasePart") then
                    part.CanCollide = true
                end
            end
        end
    end
    SaveSettings()
end

-- Infinite Jump
local InfJumpConnection
local function ToggleInfJump(state)
    if InfJumpConnection then InfJumpConnection:Disconnect() end
    if state then
        InfJumpConnection = UserInputService.JumpRequest:Connect(function()
            pcall(function()
                if LocalPlayer.Character and Toggles.InfJump then
                    local humanoid = LocalPlayer.Character:FindFirstChild("Humanoid")
                    if humanoid then
                        humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
                    end
                end
            end)
        end)
        table.insert(Connections, InfJumpConnection)
    end
    SaveSettings()
end

-- Speed Hack
local function ToggleSpeedHack(state)
    if state then
        RunService:BindToRenderStep("SpeedHack", Enum.RenderPriority.Character.Value + 1, function()
            pcall(function()
                if LocalPlayer.Character and Toggles.SpeedHack then
                    local humanoid = LocalPlayer.Character:FindFirstChild("Humanoid")
                    if humanoid then humanoid.WalkSpeed = Settings.SpeedScale end
                end
            end)
        end)
    else
        RunService:UnbindFromRenderStep("SpeedHack")
        if LocalPlayer.Character then
            local humanoid = LocalPlayer.Character:FindFirstChild("Humanoid")
            if humanoid then humanoid.WalkSpeed = 16 end
        end
    end
    SaveSettings()
end

-- Fly
local FlyBodyVelocity
local function ToggleFly(state)
    if FlyBodyVelocity then FlyBodyVelocity:Destroy() end
    RunService:UnbindFromRenderStep("Fly")
    if state and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
        FlyBodyVelocity = Instance.new("BodyVelocity")
        FlyBodyVelocity.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
        FlyBodyVelocity.Velocity = Vector3.new(0, 0, 0)
        FlyBodyVelocity.Parent = LocalPlayer.Character.HumanoidRootPart
        RunService:BindToRenderStep("Fly", Enum.RenderPriority.Input.Value + 1, function()
            pcall(function()
                if not Toggles.Fly then return end
                local moveDir = Vector3.new(0, 0, 0)
                if UserInputService:IsKeyDown(Enum.KeyCode.W) then moveDir = moveDir + Camera.CFrame.LookVector end
                if UserInputService:IsKeyDown(Enum.KeyCode.S) then moveDir = moveDir - Camera.CFrame.LookVector end
                if UserInputService:IsKeyDown(Enum.KeyCode.D) then moveDir = moveDir + Camera.CFrame.RightVector end
                if UserInputService:IsKeyDown(Enum.KeyCode.A) then moveDir = moveDir - Camera.CFrame.RightVector end
                if UserInputService:IsKeyDown(Enum.KeyCode.Space) then moveDir = moveDir + Vector3.new(0, 1, 0) end
                if UserInputService:IsKeyDown(Enum.KeyCode.LeftShift) then moveDir = moveDir - Vector3.new(0, 1, 0) end
                FlyBodyVelocity.Velocity = moveDir * 50
            end)
        end)
    end
    SaveSettings()
end

-- Jump Boost
local function ToggleJumpBoost(state)
    if state then
        RunService:BindToRenderStep("JumpBoost", Enum.RenderPriority.Character.Value + 1, function()
            pcall(function()
                if LocalPlayer.Character and Toggles.JumpBoost then
                    local humanoid = LocalPlayer.Character:FindFirstChild("Humanoid")
                    if humanoid then
                        humanoid.JumpPower = Settings.JumpBoostScale
                        humanoid.UseJumpPower = true
                    end
                end
            end)
        end)
    else
        RunService:UnbindFromRenderStep("JumpBoost")
        if LocalPlayer.Character then
            local humanoid = LocalPlayer.Character:FindFirstChild("Humanoid")
            if humanoid then humanoid.JumpPower = 50 end
        end
    end
    SaveSettings()
end

-- Super Jump
local function ToggleSuperJump(state)
    if state then
        RunService:BindToRenderStep("SuperJump", Enum.RenderPriority.Character.Value + 1, function()
            pcall(function()
                if LocalPlayer.Character and Toggles.SuperJump and UserInputService:IsKeyDown(Enum.KeyCode.Space) then
                    local root = LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
                    if root then
                        root.Velocity = Vector3.new(root.Velocity.X, Settings.JumpHeight, root.Velocity.Z)
                    end
                end
            end)
        end)
    else
        RunService:UnbindFromRenderStep("SuperJump")
    end
    SaveSettings()
end

-- Invisible
local function ToggleInvisible(state)
    pcall(function()
        if LocalPlayer.Character then
            for _, part in pairs(LocalPlayer.Character:GetDescendants()) do
                if part:IsA("BasePart") or part:IsA("Decal") then
                    part.Transparency = state and 1 or 0
                end
            end
        end
    end)
    SaveSettings()
end

-- God Mode
local function ToggleGodMode(state)
    if state then
        RunService:BindToRenderStep("GodMode", Enum.RenderPriority.Character.Value + 1, function()
            pcall(function()
                if LocalPlayer.Character and Toggles.GodMode then
                    local humanoid = LocalPlayer.Character:FindFirstChild("Humanoid")
                    if humanoid then
                        humanoid.Health = humanoid.MaxHealth
                    end
                end
            end)
        end)
    else
        RunService:UnbindFromRenderStep("GodMode")
    end
    SaveSettings()
end

-- Anti-AFK
local AntiAFKConnection
local function ToggleAntiAFK(state)
    if AntiAFKConnection then AntiAFKConnection:Disconnect() end
    RunService:UnbindFromRenderStep("AntiAFK")
    if state then
        RunService:BindToRenderStep("AntiAFK", Enum.RenderPriority.Character.Value + 1, function()
            pcall(function()
                if LocalPlayer.Character and Toggles.AntiAFK then
                    local root = LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
                    if root then
                        root.CFrame = root.CFrame * CFrame.new(math.random(-0.05, 0.05), 0, math.random(-0.05, 0.05))
                    end
                end
            end)
        end)
    end
    SaveSettings()
end

-- Jerk Script
local function ToggleJerk(state)
    local isR6 = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Torso") ~= nil
    if state then
        pcall(function()
            if not JerkInstance then
                JerkInstance = loadstring(game:HttpGet(isR6 and "https://pastefy.app/wa3v2Vgm/raw" or "https://pastefy.app/YZoglOyJ/raw"))()
            end
        end)
    else
        JerkInstance = nil
    end
    SaveSettings()
end

-- ESP
local ESP = {}
local highlights = {}
local function CreateESP(player)
    if player == LocalPlayer then return end
    local Box = Drawing.new("Square")
    Box.Thickness = 3
    Box.Filled = false
    local Tracer = Drawing.new("Line")
    Tracer.Thickness = 2
    Tracer.Transparency = 0.7
    local HealthText = Drawing.new("Text")
    HealthText.Size = 14
    HealthText.Outline = true
    HealthText.Center = true
    local NameText = Drawing.new("Text")
    NameText.Size = 14
    NameText.Outline = true
    NameText.Center = true
    local DistanceText = Drawing.new("Text")
    DistanceText.Size = 14
    DistanceText.Outline = true
    DistanceText.Center = true
    ESP[player] = {Box = Box, Tracer = Tracer, HealthText = HealthText, NameText = NameText, DistanceText = DistanceText}
    local function UpdateESP()
        pcall(function()
            local root = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
            local humanoid = player.Character and player.Character:FindFirstChild("Humanoid")
            local head = player.Character and player.Character:FindFirstChild("Head")
            if root and humanoid and head and humanoid.Health > 0 then
                local headPos, onScreen = Camera:WorldToViewportPoint(head.Position + Vector3.new(0, 1, 0))
                local rootPos = Camera:WorldToViewportPoint(root.Position)
                local dist = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") and (LocalPlayer.Character.HumanoidRootPart.Position - root.Position).Magnitude or math.huge
                local isTeammate = Toggles.TeamCheck and hasTeams() and player.Team == LocalPlayer.Team
                local teamColor = isTeammate and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)
                if onScreen and dist <= Settings.ESPDistance then
                    local character = player.Character
                    local parts = character:GetChildren()
                    local minPos, maxPos = Vector3.new(math.huge, math.huge, math.huge), Vector3.new(-math.huge, -math.huge, -math.huge)
                    for _, part in ipairs(parts) do
                        if part:IsA("BasePart") then
                            local partPos = Camera:WorldToViewportPoint(part.Position)
                            minPos = Vector3.new(
                                math.min(minPos.X, partPos.X),
                                math.min(minPos.Y, partPos.Y),
                                math.min(minPos.Z, partPos.Z)
                            )
                            maxPos = Vector3.new(
                                math.max(maxPos.X, partPos.X),
                                math.max(maxPos.Y, partPos.Y),
                                math.max(maxPos.Z, partPos.Z)
                            )
                        end
                    end
                    local width = (maxPos.X - minPos.X) * 1.2
                    local height = (maxPos.Y - minPos.Y) * 1.2
                    local x = minPos.X - (width - (maxPos.X - minPos.X)) / 2
                    local y = minPos.Y - (height - (maxPos.Y - minPos.Y)) / 2
                    Box.Position = Vector2.new(x, y)
                    Box.Size = Vector2.new(width, height)
                    Box.Color = teamColor
                    Box.Visible = Toggles.BoxESP
                    Tracer.From = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y)
                    Tracer.To = Vector2.new(rootPos.X, rootPos.Y)
                    Tracer.Color = teamColor
                    Tracer.Visible = Toggles.Tracers
                    NameText.Position = Vector2.new(headPos.X, headPos.Y - 30)
                    NameText.Text = player.Name
                    NameText.Color = teamColor
                    NameText.Visible = Toggles.NamesESP
                    HealthText.Position = Vector2.new(headPos.X, headPos.Y - 15)
                    HealthText.Text = tostring(math.floor(humanoid.Health))
                    HealthText.Color = teamColor
                    HealthText.Visible = Toggles.HealthESP
                    DistanceText.Position = Vector2.new(x + width / 2, y + height + 10)
                    DistanceText.Text = string.format("%.1fm", dist)
                    DistanceText.Color = teamColor
                    DistanceText.Visible = Toggles.DistanceESP
                else
                    for _, obj in pairs(ESP[player]) do obj.Visible = false end
                end
            else
                for _, obj in pairs(ESP[player]) do obj.Visible = false end
                if highlights[player] then highlights[player]:Destroy() highlights[player] = nil end
            end
        end)
    end
    RunService:BindToRenderStep("ESP_" .. HttpService:GenerateGUID(false), Enum.RenderPriority.Character.Value + 1, UpdateESP)
    player.CharacterAdded:Connect(function()
        task.wait(0.5)
        pcall(UpdateESP)
        if Toggles.ESPChams and player.Character then
            local isTeammate = Toggles.TeamCheck and hasTeams() and player.Team == LocalPlayer.Team
            local teamColor = isTeammate and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)
            highlights[player] = Instance.new("Highlight")
            highlights[player].Adornee = player.Character
            highlights[player].FillColor = teamColor
            highlights[player].FillTransparency = 0.5
            highlights[player].Parent = Camera
        end
    end)
end

for _, player in pairs(Players:GetPlayers()) do pcall(CreateESP, player) end
Players.PlayerAdded:Connect(function(player) pcall(CreateESP, player) end)
Players.PlayerRemoving:Connect(function(player)
    if ESP[player] then
        for _, obj in pairs(ESP[player]) do obj:Remove() end
        ESP[player] = nil
    end
    if highlights[player] then
        highlights[player]:Destroy()
        highlights[player] = nil
    end
end)

local function ToggleBoxESP(state)
    Toggles.BoxESP = state
    SaveSettings()
end

local function ToggleTracers(state)
    Toggles.Tracers = state
    SaveSettings()
end

local function ToggleHealthESP(state)
    Toggles.HealthESP = state
    SaveSettings()
end

local function ToggleNamesESP(state)
    Toggles.NamesESP = state
    SaveSettings()
end

local function ToggleDistanceESP(state)
    Toggles.DistanceESP = state
    SaveSettings()
end

local function ToggleESPChams(state)
    if state then
        for _, player in pairs(Players:GetPlayers()) do
            if player ~= LocalPlayer and player.Character then
                local isTeammate = Toggles.TeamCheck and hasTeams() and player.Team == LocalPlayer.Team
                local teamColor = isTeammate and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)
                highlights[player] = Instance.new("Highlight")
                highlights[player].Adornee = player.Character
                highlights[player].FillColor = teamColor
                highlights[player].FillTransparency = 0.5
                highlights[player].Parent = Camera
            end
        end
    else
        for _, hl in pairs(highlights) do hl:Destroy() end
        highlights = {}
    end
    SaveSettings()
end

local function ToggleTeamCheck(state)
    Toggles.TeamCheck = state
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and ESP[player] then
            local isTeammate = Toggles.TeamCheck and hasTeams() and player.Team == LocalPlayer.Team
            local teamColor = isTeammate and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)
            for _, obj in pairs(ESP[player]) do
                obj.Color = teamColor
            end
            if highlights[player] then
                highlights[player].FillColor = teamColor
            end
        end
    end
    SaveSettings()
end

-- Aimbot Key Toggle
local AimKeyFrame = Instance.new("Frame")
AimKeyFrame.Size = UDim2.new(1, 0, 0, 40)
AimKeyFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
AimKeyFrame.Parent = CombatPage

local AimKeyCorner = Instance.new("UICorner")
AimKeyCorner.CornerRadius = UDim.new(0, 8)
AimKeyCorner.Parent = AimKeyFrame

local AimKeyGradient = Instance.new("UIGradient")
AimKeyGradient.Color = ColorSequence.new{
    ColorSequenceKeypoint.new(0, Color3.fromRGB(40, 40, 40)),
    ColorSequenceKeypoint.new(1, Color3.fromRGB(25, 25, 25))
}
AimKeyGradient.Parent = AimKeyFrame

local AimKeyStroke = Instance.new("UIStroke")
AimKeyStroke.Color = Color3.fromRGB(255, 70, 70)
AimKeyStroke.Transparency = 0.7
AimKeyStroke.Thickness = 1
AimKeyStroke.Parent = AimKeyFrame

local AimKeyLabel = Instance.new("TextLabel")
AimKeyLabel.Size = UDim2.new(0.5, 0, 1, 0)
AimKeyLabel.BackgroundTransparency = 1
AimKeyLabel.Text = "Aimbot Key:"
AimKeyLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
AimKeyLabel.TextSize = 16
AimKeyLabel.Font = Enum.Font.GothamBold
AimKeyLabel.TextXAlignment = Enum.TextXAlignment.Left
AimKeyLabel.Parent = AimKeyFrame

local AimKeyLabelPadding = Instance.new("UIPadding")
AimKeyLabelPadding.PaddingLeft = UDim.new(0, 10)
AimKeyLabelPadding.Parent = AimKeyLabel

local AimKeyToggle = Instance.new("TextButton")
AimKeyToggle.Size = UDim2.new(0.4, 0, 0.8, 0)
AimKeyToggle.Position = UDim2.new(0.55, 0, 0.1, 0)
AimKeyToggle.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
AimKeyToggle.Text = aimKeyName
AimKeyToggle.TextColor3 = Color3.fromRGB(255, 255, 255)
AimKeyToggle.TextSize = 16
AimKeyToggle.Font = Enum.Font.GothamBold
AimKeyToggle.Parent = AimKeyFrame

local AimKeyToggleCorner = Instance.new("UICorner")
AimKeyToggleCorner.CornerRadius = UDim.new(0, 8)
AimKeyToggleCorner.Parent = AimKeyToggle

local AimKeyToggleGradient = Instance.new("UIGradient")
AimKeyToggleGradient.Color = ColorSequence.new{
    ColorSequenceKeypoint.new(0, Color3.fromRGB(70, 70, 70)),
    ColorSequenceKeypoint.new(1, Color3.fromRGB(40, 40, 40))
}
AimKeyToggleGradient.Parent = AimKeyToggle

AimKeyToggle.MouseButton1Click:Connect(function()
    aimKey = (aimKey == Enum.UserInputType.MouseButton1) and Enum.UserInputType.MouseButton2 or Enum.UserInputType.MouseButton1
    aimKeyName = getInputName(aimKey)
    AimKeyToggle.Text = aimKeyName
    SaveSettings()
    print("Aimbot key set to", aimKeyName)
end)

-- Assign Features
CreateToggle(CombatPage, "Aimbot", ToggleAimbot)
CreateToggle(CombatPage, "TeamCheck", ToggleTeamCheck)
CreateToggle(CombatPage, "ShowFOV", ToggleShowFOV)
CreateSlider(CombatPage, "FOVSize", 50, 500, Settings.FOVSize, function(value)
    Settings.FOVSize = value
    FOVCircle.Radius = value
    SaveSettings()
    print("FOVSize set to", value)
end)
CreateSlider(CombatPage, "AimbotDistance", 100, 5000, Settings.AimbotDistance, function(value)
    Settings.AimbotDistance = value
    SaveSettings()
    print("AimbotDistance set to", value)
end)
CreateToggle(MovementPage, "NoClip", ToggleNoClip)
CreateToggle(MovementPage, "InfJump", ToggleInfJump)
CreateToggle(MovementPage, "SpeedHack", ToggleSpeedHack)
CreateToggle(MovementPage, "Fly", ToggleFly)
CreateToggle(MovementPage, "JumpBoost", ToggleJumpBoost)
CreateToggle(MovementPage, "SuperJump", ToggleSuperJump)
CreateToggle(MovementPage, "BHOP", ToggleBHOP)
CreateSlider(MovementPage, "SpeedScale", 16, 200, Settings.SpeedScale, function(value)
    Settings.SpeedScale = value
    if Toggles.SpeedHack then ToggleSpeedHack(true) end
    SaveSettings()
end)
CreateSlider(MovementPage, "JumpBoostScale", 50, 200, Settings.JumpBoostScale, function(value)
    Settings.JumpBoostScale = value
    if Toggles.JumpBoost then ToggleJumpBoost(true) end
    SaveSettings()
end)
CreateSlider(MovementPage, "JumpHeight", 50, 200, Settings.JumpHeight, function(value)
    Settings.JumpHeight = value
    SaveSettings()
end)
CreateSlider(MovementPage, "BHOPSpeed", 10, 100, Settings.BHOPSpeed, function(value)
    Settings.BHOPSpeed = value
    SaveSettings()
end)
CreateToggle(VisualsPage, "BoxESP", ToggleBoxESP)
CreateToggle(VisualsPage, "Tracers", ToggleTracers)
CreateToggle(VisualsPage, "HealthESP", ToggleHealthESP)
CreateToggle(VisualsPage, "NamesESP", ToggleNamesESP)
CreateToggle(VisualsPage, "DistanceESP", ToggleDistanceESP)
CreateToggle(VisualsPage, "ESPChams", ToggleESPChams)
CreateSlider(VisualsPage, "ESPDistance", 100, 5000, Settings.ESPDistance, function(value)
    Settings.ESPDistance = value
    SaveSettings()
end)
CreateToggle(MiscPage, "SpinBot", ToggleSpinBot)
CreateToggle(MiscPage, "Invisible", ToggleInvisible)
CreateToggle(MiscPage, "GodMode", ToggleGodMode)
CreateToggle(MiscPage, "AntiAFK", ToggleAntiAFK)
CreateToggle(MiscPage, "EnemyLineTP", ToggleEnemyLineTP)
CreateToggle(MiscPage, "EnemyTP2_0", ToggleEnemyTP2_0)
CreateToggle(MiscPage, "Jerk", ToggleJerk)
CreateSlider(MiscPage, "SpinBotSpeed", 10, 360, Settings.SpinBotSpeed, function(value)
    Settings.SpinBotSpeed = value
    if Toggles.SpinBot then ToggleSpinBot(true) end
    SaveSettings()
end)
CreateFOVSlider(MiscPage, "GameFOV", Settings.GameFOV, UpdateGameFOV)

-- Character Reset Handling
local CharacterAddedConnection
CharacterAddedConnection = LocalPlayer.CharacterAdded:Connect(function()
    task.wait(0.5)
    ApplySavedToggles()
end)
table.insert(Connections, CharacterAddedConnection)

-- Apply saved toggles on script start
ApplySavedToggles()

print("Cheat menu loaded. Press 'RightShift' to toggle. Click 'X' to fully close. Settings persist across sessions.")
