local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local Camera = workspace.CurrentCamera
local HttpService = game:GetService("HttpService")
local TweenService = game:GetService("TweenService")
local Teams = game:GetService("Teams")

-- Activation Flag
local Activated = false
local ExpirationTime = 0

-- GUI Setup
local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Parent = game.CoreGui
ScreenGui.Name = "@Reloading :)"
ScreenGui.IgnoreGuiInset = true
ScreenGui.Enabled = true

local MainFrame = Instance.new("Frame")
MainFrame.Size = UDim2.new(0, 600, 0, 450)
MainFrame.Position = UDim2.new(0.5, -300, 0.5, -225)
MainFrame.BackgroundColor3 = Color3.fromRGB(15, 15, 15)
MainFrame.BorderSizePixel = 0
MainFrame.Active = true
MainFrame.Draggable = true
MainFrame.Visible = true
MainFrame.Parent = ScreenGui
MainFrame.BackgroundTransparency = 0.1

local UICorner = Instance.new("UICorner")
UICorner.CornerRadius = UDim.new(0, 10)
UICorner.Parent = MainFrame

local UIGradient = Instance.new("UIGradient")
UIGradient.Color = ColorSequence.new{ColorSequenceKeypoint.new(0, Color3.fromRGB(15, 15, 15)), ColorSequenceKeypoint.new(1, Color3.fromRGB(40, 40, 40))}
UIGradient.Parent = MainFrame

local Title = Instance.new("TextLabel")
Title.Size = UDim2.new(1, 0, 0, 40)
Title.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
Title.Text = "@Reloading :) - Cheat Menu"
Title.TextColor3 = Color3.fromRGB(255, 70, 70)
Title.TextSize = 22
Title.Font = Enum.Font.GothamBlack
Title.Parent = MainFrame
Title.BackgroundTransparency = 0.1
Title.TextXAlignment = Enum.TextXAlignment.Left
Title.TextStrokeTransparency = 0
Title.TextStrokeColor3 = Color3.fromRGB(0, 0, 0)

local TitlePadding = Instance.new("UIPadding")
TitlePadding.PaddingLeft = UDim.new(0, 10)
TitlePadding.Parent = Title

local CloseButton = Instance.new("TextButton")
CloseButton.Size = UDim2.new(0, 30, 0, 30)
CloseButton.Position = UDim2.new(1, -40, 0, 5)
CloseButton.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
CloseButton.Text = "X"
CloseButton.TextColor3 = Color3.fromRGB(255, 255, 255)
CloseButton.TextSize = 16
CloseButton.Font = Enum.Font.GothamBold
CloseButton.TextStrokeTransparency = 0
CloseButton.TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
CloseButton.Parent = MainFrame

CloseButton.MouseButton1Click:Connect(function()
    local tween = TweenService:Create(MainFrame, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundTransparency = 1, Visible = false})
    tween:Play()
end)

local CloseCorner = Instance.new("UICorner")
CloseCorner.CornerRadius = UDim.new(0, 6)
CloseCorner.Parent = CloseButton

local MinimizeButton = Instance.new("TextButton")
MinimizeButton.Size = UDim2.new(0, 30, 0, 30)
MinimizeButton.Position = UDim2.new(1, -80, 0, 5)
MinimizeButton.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
MinimizeButton.Text = "-"
MinimizeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
MinimizeButton.TextSize = 16
MinimizeButton.Font = Enum.Font.GothamBold
MinimizeButton.TextStrokeTransparency = 0
MinimizeButton.TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
MinimizeButton.Parent = MainFrame

local isMinimized = false
MinimizeButton.MouseButton1Click:Connect(function()
    isMinimized = not isMinimized
    MinimizeButton.Text = isMinimized and "+" or "-"
    local targetSize = isMinimized and UDim2.new(0, 600, 0, 40) or UDim2.new(0, 600, 0, 450)
    local tween = TweenService:Create(MainFrame, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Size = targetSize})
    tween:Play()
    for _, page in pairs(Pages) do
        page.Visible = isMinimized and false or (page == Pages[page.Parent:GetChildren()[1].Text] and true or false)
    end
end)

local MinimizeCorner = Instance.new("UICorner")
MinimizeCorner.CornerRadius = UDim.new(0, 6)
MinimizeCorner.Parent = MinimizeButton

-- Toggle menu with 'E' key
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if not gameProcessed and input.KeyCode == Enum.KeyCode.E then
        MainFrame.Visible = not MainFrame.Visible
        if MainFrame.Visible then
            local tween = TweenService:Create(MainFrame, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.In), {BackgroundTransparency = 0.1})
            tween:Play()
        end
    end
end)

-- Save/Load Settings
local function SaveSettings()
    local data = {Toggles = Toggles, Settings = Settings}
    writefile("UltimateCheatMenu.json", HttpService:JSONEncode(data))
end

local function LoadSettings()
    if isfile("UltimateCheatMenu.json") then
        local data = HttpService:JSONDecode(readfile("UltimateCheatMenu.json"))
        for k, v in pairs(data.Toggles or {}) do Toggles[k] = v end
        for k, v in pairs(data.Settings or {}) do Settings[k] = v end
    end
end

-- Tab System
local TabFrame = Instance.new("Frame")
TabFrame.Size = UDim2.new(1, -10, 0, 35)
TabFrame.Position = UDim2.new(0, 5, 0, 45)
TabFrame.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
TabFrame.Parent = MainFrame

local TabCorner = Instance.new("UICorner")
TabCorner.CornerRadius = UDim.new(0, 6)
TabCorner.Parent = TabFrame

local TabLayout = Instance.new("UIListLayout")
TabLayout.FillDirection = Enum.FillDirection.Horizontal
TabLayout.SortOrder = Enum.SortOrder.LayoutOrder
TabLayout.Padding = UDim.new(0, 5)
TabLayout.Parent = TabFrame

local Pages = {}
local function CreateTab(name)
    local TabButton = Instance.new("TextButton")
    TabButton.Size = UDim2.new(0, 110, 0, 30)
    TabButton.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
    TabButton.Text = name
    TabButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    TabButton.TextSize = 14
    TabButton.Font = Enum.Font.GothamBold
    TabButton.TextStrokeTransparency = 0
    TabButton.TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
    TabButton.Parent = TabFrame

    local ButtonCorner = Instance.new("UICorner")
    ButtonCorner.CornerRadius = UDim.new(0, 6)
    ButtonCorner.Parent = TabButton

    local Page = Instance.new("ScrollingFrame")
    Page.Size = UDim2.new(1, -10, 1, -90)
    Page.Position = UDim2.new(0, 5, 0, 85)
    Page.BackgroundTransparency = 1
    Page.ScrollBarThickness = 3
    Page.ScrollBarImageColor3 = Color3.fromRGB(255, 70, 70)
    Page.CanvasSize = UDim2.new(0, 0, 0, 0)
    Page.Visible = false
    Page.Parent = MainFrame

    local PageLayout = Instance.new("UIListLayout")
    PageLayout.SortOrder = Enum.SortOrder.LayoutOrder
    PageLayout.Padding = UDim.new(0, 5)
    PageLayout.Parent = Page

    local PagePadding = Instance.new("UIPadding")
    PagePadding.PaddingLeft = UDim.new(0, 5)
    PagePadding.PaddingRight = UDim.new(0, 5)
    PagePadding.Parent = Page

    Pages[name] = Page
    TabButton.MouseButton1Click:Connect(function()
        for _, page in pairs(Pages) do page.Visible = false end
        Page.Visible = not isMinimized
        SaveSettings()
    end)
    return Page
end

-- Toggles and Settings
local Toggles = {
    NoClip = false,
    InfJump = false,
    Aimbot = false,
    TeamCheck = false,
    BoxESP = false,
    Tracers = false,
    HealthESP = false,
    NamesESP = false,
    DistanceESP = false,
    SkeletonESP = false,
    SpeedHack = false,
    Fly = false,
    JumpBoost = false,
    Invisible = false,
    SpinBot = false,
    GodMode = false,
    AntiAFK = false,
    KillTP = false,
    ESPChams = false,
    SuperJump = false,
    AntiCrash = false,
    EnemyLineTP = false
}

local Settings = {
    FOVSize = 100,
    SpeedScale = 50,
    JumpBoostScale = 50,
    ESPDistance = 2000,
    AimSmoothness = 0.1,
    JumpHeight = 100
}

LoadSettings()

-- Utility Functions
local function CreateToggle(parent, name, callback)
    local ToggleFrame = Instance.new("Frame")
    ToggleFrame.Size = UDim2.new(1, -10, 0, 30)
    ToggleFrame.BackgroundTransparency = 1
    ToggleFrame.Parent = parent

    local ToggleButton = Instance.new("TextButton")
    ToggleButton.Size = UDim2.new(0, 200, 0, 30)
    ToggleButton.BackgroundColor3 = Toggles[name] and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)
    ToggleButton.Text = name .. ": " .. (Toggles[name] and "ON" or "OFF")
    ToggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    ToggleButton.TextSize = 14
    ToggleButton.Font = Enum.Font.GothamBold
    ToggleButton.TextStrokeTransparency = 0
    ToggleButton.TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
    ToggleButton.Parent = ToggleFrame

    local ButtonCorner = Instance.new("UICorner")
    ButtonCorner.CornerRadius = UDim.new(0, 6)
    ButtonCorner.Parent = ToggleButton

    local ButtonGradient = Instance.new("UIGradient")
    ButtonGradient.Color = ColorSequence.new{ColorSequenceKeypoint.new(0, ToggleButton.BackgroundColor3), ColorSequenceKeypoint.new(1, Color3.fromRGB(80, 80, 80))}
    ButtonGradient.Parent = ToggleButton

    ToggleButton.MouseButton1Click:Connect(function()
        if not Activated then
            ToggleButton.Text = name .. ": OFF (Key Required)"
            task.wait(0.5)
            ToggleButton.Text = name .. ": OFF"
            return
        end
        Toggles[name] = not Toggles[name]
        ToggleButton.Text = name .. ": " .. (Toggles[name] and "ON" or "OFF")
        ToggleButton.BackgroundColor3 = Toggles[name] and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)
        ButtonGradient.Color = ColorSequence.new{ColorSequenceKeypoint.new(0, ToggleButton.BackgroundColor3), ColorSequenceKeypoint.new(1, Color3.fromRGB(80, 80, 80))}
        pcall(callback, Toggles[name])
        SaveSettings()
    end)

    parent.CanvasSize = UDim2.new(0, 0, 0, parent.UIListLayout.AbsoluteContentSize.Y)
end

local function CreateSlider(parent, name, min, max, default, callback)
    local SliderFrame = Instance.new("Frame")
    SliderFrame.Size = UDim2.new(1, -10, 0, 50)
    SliderFrame.BackgroundTransparency = 1
    SliderFrame.Parent = parent

    local Label = Instance.new("TextLabel")
    Label.Size = UDim2.new(1, 0, 0, 20)
    Label.BackgroundTransparency = 1
    Label.Text = name .. ": " .. default
    Label.TextColor3 = Color3.fromRGB(255, 255, 255)
    Label.TextSize = 14
    Label.Font = Enum.Font.GothamBold
    Label.TextStrokeTransparency = 0
    Label.TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
    Label.Parent = SliderFrame

    local Slider = Instance.new("TextButton")
    Slider.Size = UDim2.new(1, -10, 0, 20)
    Slider.Position = UDim2.new(0, 5, 0, 25)
    Slider.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
    Slider.Text = ""
    Slider.Parent = SliderFrame

    local SliderCorner = Instance.new("UICorner")
    SliderCorner.CornerRadius = UDim.new(0, 6)
    SliderCorner.Parent = Slider

    local Fill = Instance.new("Frame")
    Fill.Size = UDim2.new((default - min) / (max - min), 0, 1, 0)
    Fill.BackgroundColor3 = Color3.fromRGB(255, 70, 70)
    Fill.Parent = Slider

    local FillCorner = Instance.new("UICorner")
    FillCorner.CornerRadius = UDim.new(0, 6)
    FillCorner.Parent = Fill

    Slider.MouseButton1Down:Connect(function()
        if not Activated then
            Label.Text = name .. ": Key Required"
            task.wait(0.5)
            Label.Text = name .. ": " .. Settings[name]
            return
        end
        local connection
        connection = UserInputService.InputChanged:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseMovement then
                local mouseX = input.Position.X
                local sliderX = Slider.AbsolutePosition.X
                local sliderWidth = Slider.AbsoluteSize.X
                local relative = math.clamp((mouseX - sliderX) / sliderWidth, 0, 1)
                local value = math.floor(min + (max - min) * relative)
                Settings[name] = value
                Label.Text = name .. ": " .. value
                Fill.Size = UDim2.new(relative, 0, 1, 0)
                pcall(callback, value)
                SaveSettings()
            end
        end)
        UserInputService.InputEnded:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                connection:Disconnect()
            end
        end)
    end)

    parent.CanvasSize = UDim2.new(0, 0, 0, parent.UIListLayout.AbsoluteContentSize.Y)
end

-- Create Pages
local ActivationPage = CreateTab("Activation")
local CombatPage = CreateTab("Combat")
local MovementPage = CreateTab("Movement")
local VisualsPage = CreateTab("Visuals")
local MiscPage = CreateTab("Misc")
Pages["Activation"].Visible = true

-- Key Input and Time Left in Activation Tab
local ActivationSection = Instance.new("Frame")
ActivationSection.Size = UDim2.new(1, -10, 0, 120)
ActivationSection.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
ActivationSection.Parent = ActivationPage

local ActivationCorner = Instance.new("UICorner")
ActivationCorner.CornerRadius = UDim.new(0, 6)
ActivationCorner.Parent = ActivationSection

local ActivationLayout = Instance.new("UIListLayout")
ActivationLayout.SortOrder = Enum.SortOrder.LayoutOrder
ActivationLayout.Padding = UDim.new(0, 10)
ActivationLayout.Parent = ActivationSection

local ActivationPadding = Instance.new("UIPadding")
ActivationPadding.PaddingTop = UDim.new(0, 10)
ActivationPadding.PaddingLeft = UDim.new(0, 10)
ActivationPadding.PaddingRight = UDim.new(0, 10)
ActivationPadding.Parent = ActivationSection

local KeyInputFrame = Instance.new("Frame")
KeyInputFrame.Size = UDim2.new(1, 0, 0, 35)
KeyInputFrame.BackgroundTransparency = 1
KeyInputFrame.Parent = ActivationSection

local KeyLabel = Instance.new("TextLabel")
KeyLabel.Size = UDim2.new(0.4, 0, 1, 0)
KeyLabel.BackgroundTransparency = 1
KeyLabel.Text = "Activation Key:"
KeyLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
KeyLabel.TextSize = 16
KeyLabel.Font = Enum.Font.GothamBold
KeyLabel.TextXAlignment = Enum.TextXAlignment.Left
KeyLabel.TextStrokeTransparency = 0
KeyLabel.TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
KeyLabel.Parent = KeyInputFrame

local KeyBox = Instance.new("TextBox")
KeyBox.Size = UDim2.new(0.6, 0, 1, 0)
KeyBox.Position = UDim2.new(0.4, 0, 0, 0)
KeyBox.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
KeyBox.Text = ""
KeyBox.PlaceholderText = "Enter key here"
KeyBox.TextColor3 = Color3.fromRGB(255, 255, 255)
KeyBox.TextSize = 14
KeyBox.Font = Enum.Font.GothamBold
KeyBox.TextStrokeTransparency = 0
KeyBox.TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
KeyBox.Parent = KeyInputFrame

local KeyBoxCorner = Instance.new("UICorner")
KeyBoxCorner.CornerRadius = UDim.new(0, 6)
KeyBoxCorner.Parent = KeyBox

local TimeLeftFrame = Instance.new("Frame")
TimeLeftFrame.Size = UDim2.new(1, 0, 0, 35)
TimeLeftFrame.BackgroundTransparency = 1
TimeLeftFrame.Parent = ActivationSection

local TimeLeftLabel = Instance.new("TextLabel")
TimeLeftLabel.Size = UDim2.new(1, 0, 1, 0)
TimeLeftLabel.BackgroundTransparency = 1
TimeLeftLabel.Text = "Status: Not Activated"
TimeLeftLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
TimeLeftLabel.TextSize = 16
TimeLeftLabel.Font = Enum.Font.GothamBold
TimeLeftLabel.TextXAlignment = Enum.TextXAlignment.Left
TimeLeftLabel.TextStrokeTransparency = 0
TimeLeftLabel.TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
TimeLeftLabel.Parent = TimeLeftFrame

-- Validate Key on Enter
KeyBox.FocusLost:Connect(function(enterPressed)
    if enterPressed then
        local key = KeyBox.Text
        local exp = tonumber(key)
        if exp and os.time() < exp then
            Activated = true
            ExpirationTime = exp
            KeyBox.Text = "Activated!"
            KeyBox.TextEditable = false
            KeyBox.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
            local timeLeft = exp - os.time()
            local days = math.floor(timeLeft / 86400)
            local hours = math.floor((timeLeft % 86400) / 3600)
            local minutes = math.floor((timeLeft % 3600) / 60)
            TimeLeftLabel.Text = string.format("Status: Active (%dd %dh %dm)", days, hours, minutes)
        else
            TimeLeftLabel.Text = "Status: Invalid or Expired Key"
            KeyBox.Text = ""
            KeyBox.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
            task.wait(1)
            KeyBox.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
        end
    end
end)

-- Update Time Left every minute
local lastUpdate = 0
RunService.Heartbeat:Connect(function()
    if Activated and tick() - lastUpdate > 60 then
        local timeLeft = ExpirationTime - os.time()
        if timeLeft > 0 then
            local days = math.floor(timeLeft / 86400)
            local hours = math.floor((timeLeft % 86400) / 3600)
            local minutes = math.floor((timeLeft % 3600) / 60)
            TimeLeftLabel.Text = string.format("Status: Active (%dd %dh %dm)", days, hours, minutes)
        else
            Activated = false
            TimeLeftLabel.Text = "Status: Key Expired"
            KeyBox.Text = ""
            KeyBox.TextEditable = true
            KeyBox.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
            for name, _ in pairs(Toggles) do
                Toggles[name] = false
            end
            ToggleNoClip(false)
            ToggleInfJump(false)
            ToggleAimbot(false)
            ToggleTeamCheck(false)
            ToggleBoxESP(false)
            ToggleTracers(false)
            ToggleHealthESP(false)
            ToggleNamesESP(false)
            ToggleDistanceESP(false)
            ToggleSkeletonESP(false)
            ToggleSpeedHack(false)
            ToggleFly(false)
            ToggleJumpBoost(false)
            ToggleInvisible(false)
            ToggleSpinBot(false)
            ToggleGodMode(false)
            ToggleAntiAFK(false)
            ToggleKillTP(false)
            ToggleESPChams(false)
            ToggleSuperJump(false)
            ToggleAntiCrash(false)
            ToggleEnemyLineTP(false)
        end
        lastUpdate = tick()
    end
end)

ActivationPage.CanvasSize = UDim2.new(0, 0, 0, ActivationPage.UIListLayout.AbsoluteContentSize.Y)

-- Check if Teams service is used
local function hasTeams()
    return #Teams:GetTeams() > 0 and LocalPlayer.Team ~= nil
end

-- Enemy Line TP
local function ToggleEnemyLineTP(state)
    if not Activated then
        Toggles.EnemyLineTP = false
        RunService:UnbindFromRenderStep("EnemyLineTP")
        return
    end
    if state then
        RunService:BindToRenderStep("EnemyLineTP", Enum.RenderPriority.Character.Value + 1, function()
            pcall(function()
                if not Toggles.EnemyLineTP then return end
                local myChar = LocalPlayer.Character
                if not myChar or not myChar:FindFirstChild("HumanoidRootPart") or not myChar:FindFirstChild("Humanoid") or myChar.Humanoid.Health <= 0 then
                    return
                end
                local myRoot = myChar.HumanoidRootPart
                local myCFrame = myRoot.CFrame
                local lookVector = myCFrame.LookVector * Vector3.new(1, 0, 1)
                local offset = 1
                for _, player in ipairs(Players:GetPlayers()) do
                    if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("Humanoid") and player.Character:FindFirstChild("HumanoidRootPart") and player.Character.Humanoid.Health > 0 then
                        local isEnemy = true
                        if hasTeams() then
                            isEnemy = player.Team ~= LocalPlayer.Team
                        end
                        if isEnemy then
                            local root = player.Character.HumanoidRootPart
                            local targetPos = myCFrame.Position + (lookVector * (5 + offset * 5))
                            targetPos = Vector3.new(targetPos.X, myCFrame.Position.Y, targetPos.Z)
                            root.CFrame = CFrame.new(targetPos, targetPos + lookVector)
                            root.Anchored = true
                            player.Character.Humanoid.WalkSpeed = 0
                            player.Character.Humanoid.JumpPower = 0
                            offset = offset + 1
                        end
                    end
                end
            end)
            task.wait(1.5)
        end)
    else
        RunService:UnbindFromRenderStep("EnemyLineTP")
        for _, player in ipairs(Players:GetPlayers()) do
            if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                local root = player.Character.HumanoidRootPart
                root.Anchored = false
                if player.Character:FindFirstChild("Humanoid") then
                    player.Character.Humanoid.WalkSpeed = 16
                    player.Character.Humanoid.JumpPower = 50
                end
            end
        end
    end
end

-- NoClip
local function ToggleNoClip(state)
    if not Activated then
        Toggles.NoClip = false
        RunService:UnbindFromRenderStep("NoClip")
        if LocalPlayer.Character then
            for _, part in pairs(LocalPlayer.Character:GetDescendants()) do
                if part:IsA("BasePart") then
                    part.CanCollide = true
                end
            end
        end
        return
    end
    if state then
        RunService:BindToRenderStep("NoClip", Enum.RenderPriority.Character.Value + 1, function()
            pcall(function()
                if LocalPlayer.Character and Toggles.NoClip then
                    for _, part in pairs(LocalPlayer.Character:GetDescendants()) do
                        if part:IsA("BasePart") and part.CanCollide then
                            part.CanCollide = false
                        end
                    end
                end
            end)
        end)
    else
        RunService:UnbindFromRenderStep("NoClip")
        if LocalPlayer.Character then
            for _, part in pairs(LocalPlayer.Character:GetDescendants()) do
                if part:IsA("BasePart") then
                    part.CanCollide = true
                end
            end
        end
    end
end

-- Infinite Jump
local InfJumpConnection
local function ToggleInfJump(state)
    if not Activated then
        Toggles.InfJump = false
        if InfJumpConnection then
            InfJumpConnection:Disconnect()
            InfJumpConnection = nil
        end
        return
    end
    if InfJumpConnection then
        InfJumpConnection:Disconnect()
        InfJumpConnection = nil
    end
    if state then
        InfJumpConnection = UserInputService.JumpRequest:Connect(function()
            pcall(function()
                if LocalPlayer.Character and Toggles.InfJump and Activated then
                    local humanoid = LocalPlayer.Character:FindFirstChild("Humanoid")
                    if humanoid then
                        humanoid.Jump = true
                        humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
                    end
                end
            end)
        end)
    end
end

-- God Mode
local function ToggleGodMode(state)
    if not Activated then
        Toggles.GodMode = false
        RunService:UnbindFromRenderStep("GodMode")
        return
    end
    if state then
        RunService:BindToRenderStep("GodMode", Enum.RenderPriority.Character.Value + 1, function()
            pcall(function()
                if LocalPlayer.Character and Toggles.GodMode then
                    local humanoid = LocalPlayer.Character:FindFirstChild("Humanoid")
                    if humanoid then
                        humanoid.Health = humanoid.MaxHealth
                    end
                end
            end)
        end)
    else
        RunService:UnbindFromRenderStep("GodMode")
    end
end

-- Aimbot + FOV (Left-click)
local FOVCircle = Drawing.new("Circle")
FOVCircle.Visible = false
FOVCircle.Radius = Settings.FOVSize
FOVCircle.Color = Color3.fromRGB(255, 70, 70)
FOVCircle.Thickness = 2
FOVCircle.Position = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)

RunService.RenderStepped:Connect(function()
    pcall(function()
        FOVCircle.Position = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
    end)
end)

local function ToggleAimbot(state)
    if not Activated then
        Toggles.Aimbot = false
        FOVCircle.Visible = false
        RunService:UnbindFromRenderStep("Aimbot")
        return
    end
    FOVCircle.Visible = state
    if state then
        RunService:BindToRenderStep("Aimbot", Enum.RenderPriority.Camera.Value + 1, function()
            pcall(function()
                if not Toggles.Aimbot then return end
                if UserInputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton1) then
                    local closest, closestDist = nil, Settings.FOVSize
                    for _, player in pairs(Players:GetPlayers()) do
                        if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("Head") then
                            if not Toggles.TeamCheck or (player.Team ~= LocalPlayer.Team and player.Team ~= nil and LocalPlayer.Team ~= nil) then
                                local headPos, onScreen = Camera:WorldToViewportPoint(player.Character.Head.Position)
                                if onScreen then
                                    local dist = (Vector2.new(headPos.X, headPos.Y) - Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)).Magnitude
                                    if dist < closestDist then
                                        closest = player.Character.Head
                                        closestDist = dist
                                    end
                                end
                            end
                        end
                    end
                    if closest then
                        local targetCFrame = CFrame.new(Camera.CFrame.Position, closest.Position)
                        local smoothedCFrame = Camera.CFrame:Lerp(targetCFrame, Settings.AimSmoothness)
                        Camera.CFrame = smoothedCFrame
                        local weapon = LocalPlayer.Character and LocalPlayer.Character:FindFirstChildWhichIsA("Tool")
                        if weapon then
                            local recoilScript = weapon:FindFirstChild("RecoilScript") or (weapon:FindFirstChild("Handle") and weapon.Handle:FindFirstChild("RecoilScript"))
                            if recoilScript then
                                recoilScript.Disabled = true
                            end
                        end
                    end
                else
                    local weapon = LocalPlayer.Character and LocalPlayer.Character:FindFirstChildWhichIsA("Tool")
                    if weapon then
                        local recoilScript = weapon:FindFirstChild("RecoilScript") or (weapon:FindFirstChild("Handle") and weapon.Handle:FindFirstChild("RecoilScript"))
                        if recoilScript then
                            recoilScript.Disabled = false
                        end
                    end
                end
            end)
        end)
    else
        RunService:UnbindFromRenderStep("Aimbot")
        FOVCircle.Visible = false
        local weapon = LocalPlayer.Character and LocalPlayer.Character:FindFirstChildWhichIsA("Tool")
        if weapon then
            local recoilScript = weapon:FindFirstChild("RecoilScript") or (weapon:FindFirstChild("Handle") and weapon.Handle:FindFirstChild("RecoilScript"))
            if recoilScript then
                recoilScript.Disabled = false
            end
        end
    end
end

-- Team Check
local function ToggleTeamCheck(state)
    if not Activated then
        Toggles.TeamCheck = false
        return
    end
    Toggles.TeamCheck = state
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and ESP[player] then
            local espData = ESP[player]
            local teamColor = (Toggles.TeamCheck and player.Team and LocalPlayer.Team and player.Team == LocalPlayer.Team) and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)
            espData.Box.Color = teamColor
            espData.Tracer.Color = teamColor
            espData.HealthBar.Color = teamColor
            espData.HealthText.Color = teamColor
            espData.NameText.Color = teamColor
            espData.DistanceText.Color = teamColor
            for _, line in ipairs(espData.SkeletonLines) do
                line.Color = teamColor
            end
            if Toggles.ESPChams and highlights[player] then
                highlights[player].FillColor = teamColor
            end
        end
    end
end

-- ESP Toggles
local function ToggleBoxESP(state)
    if not Activated then
        Toggles.BoxESP = false
        return
    end
    Toggles.BoxESP = state
end

local function ToggleTracers(state)
    if not Activated then
        Toggles.Tracers = false
        return
    end
    Toggles.Tracers = state
end

local function ToggleHealthESP(state)
    if not Activated then
        Toggles.HealthESP = false
        return
    end
    Toggles.HealthESP = state
end

local function ToggleNamesESP(state)
    if not Activated then
        Toggles.NamesESP = false
        return
    end
    Toggles.NamesESP = state
end

local function ToggleDistanceESP(state)
    if not Activated then
        Toggles.DistanceESP = false
        return
    end
    Toggles.DistanceESP = state
end

local function ToggleSkeletonESP(state)
    if not Activated then
        Toggles.SkeletonESP = false
        return
    end
    Toggles.SkeletonESP = state
end

-- Spin Bot
local function ToggleSpinBot(state)
    if not Activated then
        Toggles.SpinBot = false
        RunService:UnbindFromRenderStep("SpinBot")
        return
    end
    if state then
        RunService:BindToRenderStep("SpinBot", Enum.RenderPriority.Character.Value + 1, function()
            pcall(function()
                if not Toggles.SpinBot then return end
                local root = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
                if root then
                    root.CFrame = root.CFrame * CFrame.Angles(0, math.rad(180), 0)
                end
            end)
        end)
    else
        RunService:UnbindFromRenderStep("SpinBot")
    end
end

-- KillTP
local KillTPCharConn
local function ToggleKillTP(state)
    if not Activated then
        Toggles.KillTP = false
        RunService:UnbindFromRenderStep("KillTP")
        if LocalPlayer.Character then
            local hrp = LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
            if hrp then hrp.Anchored = false end
        end
        if KillTPCharConn then KillTPCharConn:Disconnect() KillTPCharConn = nil end
        return
    end
    local char = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
    local hrp = char:WaitForChild("HumanoidRootPart")
    local humanoid = char:WaitForChild("Humanoid")
    if KillTPCharConn then KillTPCharConn:Disconnect() end
    if state then
        KillTPCharConn = LocalPlayer.CharacterAdded:Connect(function(new_char)
            if not Toggles.KillTP then return end
            char = new_char
            hrp = char:WaitForChild("HumanoidRootPart")
            humanoid = char:WaitForChild("Humanoid")
            if Toggles.KillTP and Activated then hrp.Anchored = false end
        end)
        RunService:BindToRenderStep("KillTP", Enum.RenderPriority.Character.Value + 1, function()
            pcall(function()
                if not Toggles.KillTP then return end
                local enemies = {}
                for _, p in ipairs(Players:GetPlayers()) do
                    if p ~= LocalPlayer and (not Toggles.TeamCheck or (p.Team ~= LocalPlayer.Team and p.Team ~= nil and LocalPlayer.Team ~= nil)) and p.Character and p.Character:FindFirstChild("Humanoid") and p.Character.Humanoid.Health > 0 and p.Character:FindFirstChild("Head") then
                        table.insert(enemies, p.Character)
                    end
                end
                if #enemies == 0 then
                    print("KillTP: No valid targets found")
                    hrp.Anchored = false
                    task.wait(0.5)
                    return
                end
                for _, target in ipairs(enemies) do
                    if not Toggles.KillTP then break end
                    local t_head = target:FindFirstChild("Head")
                    local t_humanoid = target:FindFirstChild("Humanoid")
                    if t_head and t_humanoid and t_humanoid.Health > 0 then
                        local start_time = tick()
                        hrp.Anchored = true
                        while tick() - start_time < 2.8 and Toggles.KillTP and t_humanoid.Health > 0 and t_head and target.Parent do
                            hrp.CFrame = t_head.CFrame * CFrame.new(0, 1, 0)
                            if humanoid.Health <= 0 then
                                char = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
                                hrp = char:WaitForChild("HumanoidRootPart")
                                humanoid = char:WaitForChild("Humanoid")
                                hrp.Anchored = false
                                break
                            end
                            local tool = char:FindFirstChildOfClass("Tool")
                            if not tool then
                                for _, t in ipairs(LocalPlayer.Backpack:GetChildren()) do
                                    if t:IsA("Tool") then
                                        humanoid:EquipTool(t)
                                        tool = t
                                        break
                                    end
                                end
                            end
                            if tool then
                                if char:FindFirstChild(tool.Name) ~= tool then
                                    humanoid:EquipTool(tool)
                                end
                                tool:Activate()
                                for _ = 1, 3 do
                                    if not Toggles.KillTP or t_humanoid.Health <= 0 or not t_head or not target.Parent then break end
                                    tool:Activate()
                                    task.wait(0.05)
                                end
                            else
                                print("KillTP: No tool found for " .. target.Name)
                            end
                            task.wait(0.01)
                        end
                        hrp.Anchored = false
                        if not t_head or t_humanoid.Health <= 0 or not target.Parent then
                            print("KillTP: Target " .. target.Name .. " eliminated or despawned")
                        end
                        if Toggles.KillTP then
                            task.wait(math.max(0, 2.8 - (tick() - start_time)))
                        end
                    end
                end
            end)
        end)
    else
        RunService:UnbindFromRenderStep("KillTP")
        if LocalPlayer.Character then
            local hrp = LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
            if hrp then hrp.Anchored = false end
        end
        if KillTPCharConn then KillTPCharConn:Disconnect() KillTPCharConn = nil end
    end
end

-- ESP with Enhanced Visuals
local ESP = {}
local highlights = {}
local function CreateESP(player)
    if player == LocalPlayer then return end
    local Box = Drawing.new("Square")
    local Tracer = Drawing.new("Line")
    local HealthBar = Drawing.new("Square")
    local HealthText = Drawing.new("Text")
    local NameText = Drawing.new("Text")
    local DistanceText = Drawing.new("Text")
    local SkeletonLines = {}
    for i = 1, 12 do
        SkeletonLines[i] = Drawing.new("Line")
        SkeletonLines[i].Thickness = 3
        SkeletonLines[i].Transparency = 0.7
    end
    Box.Thickness = 3
    Box.Filled = false
    Tracer.Thickness = 2
    Tracer.Transparency = 0.7
    HealthBar.Thickness = 2
    HealthText.Size = 14
    HealthText.Outline = true
    HealthText.OutlineColor = Color3.fromRGB(0, 0, 0)
    NameText.Size = 14
    NameText.Outline = true
    NameText.OutlineColor = Color3.fromRGB(0, 0, 0)
    DistanceText.Size = 14
    DistanceText.Outline = true
    DistanceText.OutlineColor = Color3.fromRGB(0, 0, 0)
    HealthText.Center = true
    NameText.Center = true
    DistanceText.Center = true
    ESP[player] = {Box = Box, Tracer = Tracer, HealthBar = HealthBar, HealthText = HealthText, NameText = NameText, DistanceText = DistanceText, SkeletonLines = SkeletonLines}
    local function UpdateESP()
        pcall(function()
            if not Activated then
                Box.Visible = false
                Tracer.Visible = false
                HealthBar.Visible = false
                HealthText.Visible = false
                NameText.Visible = false
                DistanceText.Visible = false
                for i = 1, 12 do SkeletonLines[i].Visible = false end
                if highlights[player] then
                    highlights[player]:Destroy()
                    highlights[player] = nil
                end
                return
            end
            if player.Character and player.Character:FindFirstChild("HumanoidRootPart") and player.Character:FindFirstChild("Head") then
                local root = player.Character.HumanoidRootPart
                local head = player.Character.Head
                local humanoid = player.Character:FindFirstChild("Humanoid")
                local rootPos, onScreen = Camera:WorldToViewportPoint(root.Position)
                local dist = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") and (LocalPlayer.Character.HumanoidRootPart.Position - root.Position).Magnitude or math.huge
                local teamColor = (Toggles.TeamCheck and player.Team and LocalPlayer.Team and player.Team == LocalPlayer.Team) and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)
                if onScreen and dist <= Settings.ESPDistance then
                    local tanFov = math.tan(math.rad(Camera.FieldOfView / 2))
                    local scale = Camera.ViewportSize.Y / (2 * rootPos.Z * tanFov)
                    local width = 6 * scale
                    local height = 8 * scale
                    local x = rootPos.X - width / 2
                    local y = rootPos.Y - height / 2
                    Box.Position = Vector2.new(x, y)
                    Box.Size = Vector2.new(width, height)
                    Box.Color = teamColor
                    Box.Visible = Toggles.BoxESP
                    Tracer.From = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y)
                    Tracer.To = Vector2.new(rootPos.X, rootPos.Y)
                    Tracer.Color = teamColor
                    Tracer.Visible = Toggles.Tracers
                    if humanoid and Toggles.HealthESP then
                        local healthPercent = humanoid.Health / humanoid.MaxHealth
                        HealthBar.Size = Vector2.new(width / 4, height * healthPercent)
                        HealthBar.Position = Vector2.new(x - width / 4 - 5, y + height * (1 - healthPercent))
                        HealthBar.Color = teamColor
                        HealthBar.Visible = true
                        HealthText.Position = Vector2.new(x - width / 4 - 5, y - 15)
                        HealthText.Text = string.format("%d HP", math.floor(humanoid.Health))
                        HealthText.Color = teamColor
                        HealthText.Visible = true
                    else
                        HealthBar.Visible = false
                        HealthText.Visible = false
                    end
                    NameText.Position = Vector2.new(x + width / 2, y - 25)
                    NameText.Text = player.Name
                    NameText.Color = teamColor
                    NameText.Visible = Toggles.NamesESP
                    DistanceText.Position = Vector2.new(x + width / 2, y + height + 10)
                    DistanceText.Text = string.format("%.1fm", dist)
                    DistanceText.Color = teamColor
                    DistanceText.Visible = Toggles.DistanceESP
                    if Toggles.SkeletonESP then
                        local parts = {
                            {from = "Head", to = "UpperTorso", altFrom = "Torso", altTo = "Torso"},
                            {from = "UpperTorso", to = "LeftUpperArm", altFrom = "Torso", altTo = "Left Arm"},
                            {from = "UpperTorso", to = "RightUpperArm", altFrom = "Torso", altTo = "Right Arm"},
                            {from = "LeftUpperArm", to = "LeftLowerArm", altFrom = "Left Arm", altTo = "Left Arm"},
                            {from = "RightUpperArm", to = "RightLowerArm", altFrom = "Right Arm", altTo = "Right Arm"},
                            {from = "LeftLowerArm", to = "LeftHand"},
                            {from = "RightLowerArm", to = "RightHand"},
                            {from = "UpperTorso", to = "LeftUpperLeg", altFrom = "Torso", altTo = "Left Leg"},
                            {from = "UpperTorso", to = "RightUpperLeg", altFrom = "Torso", altTo = "Right Leg"},
                            {from = "LeftUpperLeg", to = "LeftLowerLeg", altFrom = "Left Leg", altTo = "Left Leg"},
                            {from = "RightUpperLeg", to = "RightLowerLeg", altFrom = "Right Leg", altTo = "Right Leg"},
                            {from = "LeftLowerLeg", to = "LeftFoot"},
                            {from = "RightLowerLeg", to = "RightFoot"}
                        }
                        for i = 1, #parts do
                            local pair = parts[i]
                            local fromPartName = pair.altFrom or pair.from
                            local toPartName = pair.altTo or pair.to
                            local fromPart = player.Character:FindFirstChild(fromPartName)
                            local toPart = player.Character:FindFirstChild(toPartName)
                            if fromPart and toPart then
                                local fromPos, fromOnScreen = Camera:WorldToViewportPoint(fromPart.Position)
                                local toPos, toOnScreen = Camera:WorldToViewportPoint(toPart.Position)
                                if fromOnScreen and toOnScreen then
                                    SkeletonLines[i].From = Vector2.new(fromPos.X, fromPos.Y)
                                    SkeletonLines[i].To = Vector2.new(toPos.X, toPos.Y)
                                    SkeletonLines[i].Color = teamColor
                                    SkeletonLines[i].Visible = true
                                else
                                    SkeletonLines[i].Visible = false
                                end
                            else
                                SkeletonLines[i].Visible = false
                            end
                        end
                        for i = #parts + 1, 12 do
                            SkeletonLines[i].Visible = false
                        end
                    else
                        for i = 1, 12 do
                            SkeletonLines[i].Visible = false
                        end
                    end
                else
                    Box.Visible = false
                    Tracer.Visible = false
                    HealthBar.Visible = false
                    HealthText.Visible = false
                    NameText.Visible = false
                    DistanceText.Visible = false
                    for i = 1, 12 do SkeletonLines[i].Visible = false end
                end
            else
                Box.Visible = false
                Tracer.Visible = false
                HealthBar.Visible = false
                HealthText.Visible = false
                NameText.Visible = false
                DistanceText.Visible = false
                for i = 1, 12 do SkeletonLines[i].Visible = false end
                if highlights[player] then
                    highlights[player]:Destroy()
                    highlights[player] = nil
                end
            end
        end)
    end
    RunService:BindToRenderStep("ESP_" .. HttpService:GenerateGUID(false), Enum.RenderPriority.Character.Value + 1, UpdateESP)
    local charConn
    charConn = player.CharacterAdded:Connect(function(char)
        task.wait(0.5)
        pcall(UpdateESP)
        if Toggles.ESPChams then
            local teamColor = (Toggles.TeamCheck and player.Team and LocalPlayer.Team and player.Team == LocalPlayer.Team) and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)
            highlights[player] = Instance.new("Highlight")
            highlights[player].Adornee = char
            highlights[player].FillColor = teamColor
            highlights[player].FillTransparency = 0.3
            highlights[player].OutlineColor = Color3.new(1, 1, 1)
            highlights[player].OutlineTransparency = 0
            highlights[player].Parent = Camera
        end
    end)
    player.AncestryChanged:Connect(function()
        if charConn then charConn:Disconnect() end
    end)
end

for _, player in pairs(Players:GetPlayers()) do pcall(CreateESP, player) end
Players.PlayerAdded:Connect(function(player) pcall(CreateESP, player) end)
Players.PlayerRemoving:Connect(function(player)
    if ESP[player] then
        for _, obj in pairs(ESP[player]) do
            if type(obj) == "table" then
                for _, line in ipairs(obj) do line:Remove() end
            else
                obj:Remove()
            end
        end
        RunService:UnbindFromRenderStep("ESP_" .. player.Name)
        ESP[player] = nil
    end
    if highlights[player] then
        highlights[player]:Destroy()
        highlights[player] = nil
    end
end)

-- Speed Hack
local function ToggleSpeedHack(state)
    if not Activated then
        Toggles.SpeedHack = false
        RunService:UnbindFromRenderStep("SpeedHack")
        local humanoid = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid")
        if humanoid then humanoid.WalkSpeed = 16 end
        return
    end
    if state then
        RunService:BindToRenderStep("SpeedHack", Enum.RenderPriority.Character.Value + 1, function()
            pcall(function()
                if not Toggles.SpeedHack then return end
                local humanoid = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid")
                if humanoid then
                    humanoid.WalkSpeed = Settings.SpeedScale
                end
            end)
        end)
    else
        RunService:UnbindFromRenderStep("SpeedHack")
        local humanoid = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid")
        if humanoid then humanoid.WalkSpeed = 16 end
    end
end

-- Fly
local FlyBodyVelocity
local function ToggleFly(state)
    if not Activated then
        Toggles.Fly = false
        if FlyBodyVelocity then
            FlyBodyVelocity:Destroy()
            FlyBodyVelocity = nil
        end
        RunService:UnbindFromRenderStep("Fly")
        return
    end
    if FlyBodyVelocity then
        FlyBodyVelocity:Destroy()
        FlyBodyVelocity = nil
    end
    RunService:UnbindFromRenderStep("Fly")
    if state and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
        FlyBodyVelocity = Instance.new("BodyVelocity")
        FlyBodyVelocity.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
        FlyBodyVelocity.Velocity = Vector3.new(0, 0, 0)
        FlyBodyVelocity.Parent = LocalPlayer.Character.HumanoidRootPart
        RunService:BindToRenderStep("Fly", Enum.RenderPriority.Input.Value + 1, function()
            pcall(function()
                if not Toggles.Fly then return end
                local moveDir = Vector3.new(0, 0, 0)
                if UserInputService:IsKeyDown(Enum.KeyCode.W) then moveDir = moveDir + Camera.CFrame.LookVector end
                if UserInputService:IsKeyDown(Enum.KeyCode.S) then moveDir = moveDir - Camera.CFrame.LookVector end
                if UserInputService:IsKeyDown(Enum.KeyCode.D) then moveDir = moveDir + Camera.CFrame.RightVector end
                if UserInputService:IsKeyDown(Enum.KeyCode.A) then moveDir = moveDir - Camera.CFrame.RightVector end
                if UserInputService:IsKeyDown(Enum.KeyCode.Space) then moveDir = moveDir + Vector3.new(0, 1, 0) end
                if UserInputService:IsKeyDown(Enum.KeyCode.LeftShift) then moveDir = moveDir - Vector3.new(0, 1, 0) end
                FlyBodyVelocity.Velocity = moveDir * 50
            end)
        end)
    end
end

-- Jump Boost
local function ToggleJumpBoost(state)
    if not Activated then
        Toggles.JumpBoost = false
        RunService:UnbindFromRenderStep("JumpBoost")
        local humanoid = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid")
        if humanoid then humanoid.JumpPower = 50 end
        return
    end
    if state then
        RunService:BindToRenderStep("JumpBoost", Enum.RenderPriority.Character.Value + 1, function()
            pcall(function()
                if not Toggles.JumpBoost then return end
                local humanoid = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid")
                if humanoid then
                    humanoid.JumpPower = Settings.JumpBoostScale
                    humanoid.UseJumpPower = true
                end
            end)
        end)
    else
        RunService:UnbindFromRenderStep("JumpBoost")
        local humanoid = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid")
        if humanoid then humanoid.JumpPower = 50 end
    end
end

-- SuperJump
local function ToggleSuperJump(state)
    if not Activated then
        Toggles.SuperJump = false
        RunService:UnbindFromRenderStep("SuperJump")
        return
    end
    if state then
        RunService:BindToRenderStep("SuperJump", Enum.RenderPriority.Character.Value + 1, function()
            pcall(function()
                if not Toggles.SuperJump then return end
                local humanoid = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid")
                if humanoid and UserInputService:IsKeyDown(Enum.KeyCode.Space) then
                    local root = LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
                    if root then
                        root.Velocity = Vector3.new(root.Velocity.X, Settings.JumpHeight, root.Velocity.Z)
                    end
                end
            end)
        end)
    else
        RunService:UnbindFromRenderStep("SuperJump")
    end
end

-- Invisible
local function ToggleInvisible(state)
    if not Activated then
        Toggles.Invisible = false
        if LocalPlayer.Character then
            for _, part in pairs(LocalPlayer.Character:GetDescendants()) do
                if part:IsA("BasePart") or part:IsA("Decal") or part:IsA("Texture") or part:IsA("MeshPart") then
                    part.Transparency = 0
                end
            end
        end
        return
    end
    pcall(function()
        if LocalPlayer.Character then
            for _, part in pairs(LocalPlayer.Character:GetDescendants()) do
                if part:IsA("BasePart") or part:IsA("Decal") or part:IsA("Texture") or part:IsA("MeshPart") then
                    part.Transparency = state and 1 or 0
                end
            end
            local root = LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
            if state and root then
                root.Anchored = true
                task.wait(0.1)
                root.Anchored = false
            end
        end
    end)
end

-- Anti-AFK
local function ToggleAntiAFK(state)
    if not Activated then
        Toggles.AntiAFK = false
        RunService:UnbindFromRenderStep("AntiAFK")
        return
    end
    if state then
        RunService:BindToRenderStep("AntiAFK", Enum.RenderPriority.Character.Value + 1, function()
            pcall(function()
                if not Toggles.AntiAFK then return end
                if LocalPlayer.Character then
                    local root = LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
                    if root then
                        root.CFrame = root.CFrame * CFrame.new(math.random(-0.05, 0.05), 0, math.random(-0.05, 0.05))
                    end
                end
            end)
        end)
    else
        RunService:UnbindFromRenderStep("AntiAFK")
    end
end

-- ESP Chams with Highlight
local function ToggleESPChams(state)
    if not Activated then
        Toggles.ESPChams = false
        for player, hl in pairs(highlights) do
            if hl then hl:Destroy() end
            highlights[player] = nil
        end
        return
    end
    if state then
        for _, player in pairs(Players:GetPlayers()) do
            if player ~= LocalPlayer and player.Character then
                local teamColor = (Toggles.TeamCheck and player.Team and LocalPlayer.Team and player.Team == LocalPlayer.Team) and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)
                highlights[player] = Instance.new("Highlight")
                highlights[player].Adornee = player.Character
                highlights[player].FillColor = teamColor
                highlights[player].FillTransparency = 0.3
                highlights[player].OutlineColor = Color3.new(1, 1, 1)
                highlights[player].OutlineTransparency = 0
                highlights[player].Parent = Camera
            end
        end
    else
        for player, hl in pairs(highlights) do
            if hl then hl:Destroy() end
            highlights[player] = nil
        end
    end
end

-- AntiCrash
local function ToggleAntiCrash(state)
    if not Activated then
        Toggles.AntiCrash = false
        return
    end
end

-- Assign Features to Pages
CreateToggle(CombatPage, "Aimbot", ToggleAimbot)
CreateToggle(CombatPage, "TeamCheck", ToggleTeamCheck)
CreateToggle(CombatPage, "SpinBot", ToggleSpinBot)
CreateToggle(CombatPage, "KillTP", ToggleKillTP)
CreateToggle(CombatPage, "EnemyLineTP", ToggleEnemyLineTP)
CreateSlider(CombatPage, "FOVSize", 50, 500, 100, function(value)
    if not Activated then return end
    Settings.FOVSize = value
    FOVCircle.Radius = value
end)
CreateSlider(CombatPage, "AimSmoothness", 1, 10, 1, function(value)
    if not Activated then return end
    Settings.AimSmoothness = value / 10
end)
CreateToggle(MovementPage, "NoClip", ToggleNoClip)
CreateToggle(MovementPage, "InfJump", ToggleInfJump)
CreateToggle(MovementPage, "SpeedHack", ToggleSpeedHack)
CreateToggle(MovementPage, "Fly", ToggleFly)
CreateToggle(MovementPage, "JumpBoost", ToggleJumpBoost)
CreateToggle(MovementPage, "SuperJump", ToggleSuperJump)
CreateSlider(MovementPage, "SpeedScale", 16, 200, 50, function(value)
    if not Activated then return end
    Settings.SpeedScale = value
    if Toggles.SpeedHack then ToggleSpeedHack(true) end
end)
CreateSlider(MovementPage, "JumpBoostScale", 50, 200, 50, function(value)
    if not Activated then return end
    Settings.JumpBoostScale = value
    if Toggles.JumpBoost then ToggleJumpBoost(true) end
end)
CreateSlider(MovementPage, "JumpHeight", 50, 200, 100, function(value)
    if not Activated then return end
    Settings.JumpHeight = value
end)
CreateToggle(VisualsPage, "BoxESP", ToggleBoxESP)
CreateToggle(VisualsPage, "Tracers", ToggleTracers)
CreateToggle(VisualsPage, "HealthESP", ToggleHealthESP)
CreateToggle(VisualsPage, "NamesESP", ToggleNamesESP)
CreateToggle(VisualsPage, "DistanceESP", ToggleDistanceESP)
CreateToggle(VisualsPage, "SkeletonESP", ToggleSkeletonESP)
CreateToggle(VisualsPage, "ESPChams", ToggleESPChams)
CreateSlider(VisualsPage, "ESPDistance", 100, 5000, 2000, function(value)
    if not Activated then return end
    Settings.ESPDistance = value
end)
CreateToggle(MiscPage, "Invisible", ToggleInvisible)
CreateToggle(MiscPage, "GodMode", ToggleGodMode)
CreateToggle(MiscPage, "AntiAFK", ToggleAntiAFK)
CreateToggle(MiscPage, "AntiCrash", ToggleAntiCrash)

-- Anti-Detect
local mt = getrawmetatable(game)
local oldnc = mt.__namecall
setreadonly(mt, false)
mt.__namecall = function(self, ...)
    local method = getnamecallmethod()
    if method == "Kick" or method == "Ban" or method == "ReportAbuse" or method == "FireServer" and tostring(self) == "AntiCheat" then
        return
    end
    return oldnc(self, ...)
end
setreadonly(mt, true)

-- Character Reset Handling
LocalPlayer.CharacterAdded:Connect(function(character)
    task.wait(0.5)
    if not Activated then return end
    if Toggles.NoClip then ToggleNoClip(true) end
    if Toggles.InfJump then ToggleInfJump(true) end
    if Toggles.SpeedHack then ToggleSpeedHack(true) end
    if Toggles.Fly then ToggleFly(true) end
    if Toggles.JumpBoost then ToggleJumpBoost(true) end
    if Toggles.Invisible then ToggleInvisible(true) end
    if Toggles.SpinBot then ToggleSpinBot(true) end
    if Toggles.GodMode then ToggleGodMode(true) end
    if Toggles.AntiAFK then ToggleAntiAFK(true) end
    if Toggles.KillTP then ToggleKillTP(true) end
    if Toggles.SuperJump then ToggleSuperJump(true) end
    if Toggles.ESPChams then ToggleESPChams(true) end
    if Toggles.AntiCrash then ToggleAntiCrash(true) end
    if Toggles.EnemyLineTP then ToggleEnemyLineTP(true) end
end)

print("Cheat menu loaded, you sadistic prick. Enter your key, toggle EnemyLineTP in Combat tab, and watch enemies line up for your slaughter fest.")
