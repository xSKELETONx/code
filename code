local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local Camera = workspace.CurrentCamera
local TweenService = game:GetService("TweenService")
local Teams = game:GetService("Teams")
local HttpService = game:GetService("HttpService")

-- Variables
local aimKey = Enum.UserInputType.MouseButton1
local aimKeyName = "LeftClick"
local BHOP_JUMP_POWER = 55
local BHOP_AIR_CONTROL = 0.6
local BHOP_MAX_SPEED = 100
local JUMP_COOLDOWN = 0.1
local isBhopping = false
local lastJumpTime = 0
local bhopConnection = nil
local isZooming = false
local lastTarget = nil
local FlyBodyVelocity = nil
local JerkInstance = nil
local ESP = {}
local Connections = {}
local Settings = {
    FOVSize = 100,
    SpeedScale = 50,
    JumpBoostScale = 50,
    SuperJumpScale = 100,
    SpinBotSpeed = 10,
    GameFOV = 70,
    AimbotDistance = 2000,
    BHOPSpeed = 20,
    FlySpeed = 50,
    CameraZoomScale = 30,
    ESPDistance = 500,
    BoxThickness = 2,
    BoxColor = Color3.fromRGB(255, 255, 255)
}
local Toggles = {
    NoClip = false,
    InfJump = false,
    Aimbot = false,
    TeamCheck = false,
    BoxESP = false,
    Tracers = false,
    HealthESP = false,
    NamesESP = false,
    DistanceESP = false,
    SpeedHack = false,
    Fly = false,
    JumpBoost = false,
    SuperJump = false,
    Invisible = false,
    SpinBot = false,
    GodMode = false,
    AntiAFK = false,
    ['EnemyTP-Kill'] = false,
    ShowFOV = false,
    Jerk = false,
    BHOP = false,
    CameraZoom = false
}

-- Utility Functions
local function getInputName(input)
    if input:IsA("EnumItem") and input.EnumType == Enum.UserInputType then
        return input.Name:gsub("MouseButton", "Click")
    end
    return tostring(input)
end

local function hasTeams()
    return #Teams:GetTeams() > 0 and LocalPlayer.Team ~= nil
end

local function isValidCharacter(player)
    return player.Character and player.Character:FindFirstChild("HumanoidRootPart") and player.Character:FindFirstChild("Humanoid") and player.Character.Humanoid.Health > 0
end

-- Popup Setup
local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Parent = game.CoreGui
ScreenGui.Name = "Reloading :) Menu"
ScreenGui.IgnoreGuiInset = true
ScreenGui.Enabled = true
ScreenGui.ResetOnSpawn = false

local PopupFrame = Instance.new("Frame")
PopupFrame.Size = UDim2.new(0, 300, 0, 100)
PopupFrame.Position = UDim2.new(0.5, -150, 0.5, -50)
PopupFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
PopupFrame.BorderSizePixel = 0
PopupFrame.Parent = ScreenGui
PopupFrame.BackgroundTransparency = 1

local PopupCorner = Instance.new("UICorner")
PopupCorner.CornerRadius = UDim.new(0, 12)
PopupCorner.Parent = PopupFrame

local PopupText = Instance.new("TextLabel")
PopupText.Size = UDim2.new(1, 0, 1, 0)
PopupText.BackgroundTransparency = 1
PopupText.Text = "Reloading :)"
PopupText.TextColor3 = Color3.fromRGB(255, 255, 255)
PopupText.TextSize = 24
PopupText.Font = Enum.Font.SourceSansBold
PopupText.TextTransparency = 1
PopupText.Parent = PopupFrame

-- Popup Animation
local function showPopup()
    TweenService:Create(PopupFrame, TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundTransparency = 0}):Play()
    TweenService:Create(PopupText, TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextTransparency = 0}):Play()
    task.wait(1.5)
    TweenService:Create(PopupFrame, TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.In), {BackgroundTransparency = 1}):Play()
    TweenService:Create(PopupText, TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.In), {TextTransparency = 1}):Play()
    task.wait(0.5)
    PopupFrame:Destroy()
end
showPopup()

-- GUI Setup
local MainFrame = Instance.new("Frame")
MainFrame.Size = UDim2.new(0, 0, 0, 0)
MainFrame.Position = UDim2.new(0.5, -350, 0.5, -225)
MainFrame.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
MainFrame.BorderSizePixel = 0
MainFrame.Visible = true
MainFrame.Parent = ScreenGui
MainFrame.BackgroundTransparency = 1
TweenService:Create(MainFrame, TweenInfo.new(0.3, Enum.EasingStyle.Back, Enum.EasingDirection.Out), {Size = UDim2.new(0, 700, 0, 450), BackgroundTransparency = 0}):Play()

local MainCorner = Instance.new("UICorner")
MainCorner.CornerRadius = UDim.new(0, 8)
MainCorner.Parent = MainFrame

-- Smooth Dragging
local isDragging = false
local dragStart = nil
local startPos = nil

local function updateDrag(input)
    local delta = input.Position - dragStart
    local newPos = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    TweenService:Create(MainFrame, TweenInfo.new(0.1, Enum.EasingStyle.Linear), {Position = newPos}):Play()
end

UserInputService.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 and MainFrame.Visible then
        local mousePos = input.Position
        local framePos = MainFrame.AbsolutePosition
        local frameSize = MainFrame.AbsoluteSize
        if mousePos.X >= framePos.X and mousePos.X <= framePos.X + frameSize.X and mousePos.Y >= framePos.Y and mousePos.Y <= framePos.Y + 40 then
            isDragging = true
            dragStart = mousePos
            startPos = MainFrame.Position
        end
    end
end)

UserInputService.InputChanged:Connect(function(input)
    if isDragging and input.UserInputType == Enum.UserInputType.MouseMovement then
        updateDrag(input)
    end
end)

UserInputService.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        isDragging = false
    end
end)

local TopBar = Instance.new("Frame")
TopBar.Size = UDim2.new(1, 0, 0, 40)
TopBar.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
TopBar.Parent = MainFrame

local Title = Instance.new("TextLabel")
Title.Size = UDim2.new(0.5, 0, 1, 0)
Title.BackgroundTransparency = 1
Title.Text = "Reloading :)"
Title.TextColor3 = Color3.fromRGB(255, 255, 255)
Title.TextSize = 18
Title.Font = Enum.Font.SourceSansSemibold
Title.TextXAlignment = Enum.TextXAlignment.Left
Title.Parent = TopBar
local TitlePadding = Instance.new("UIPadding")
TitlePadding.PaddingLeft = UDim.new(0, 15)
TitlePadding.Parent = Title

-- FPS and Ping Display
local StatsFrame = Instance.new("Frame")
StatsFrame.Size = UDim2.new(0, 120, 0, 30)
StatsFrame.Position = UDim2.new(1, -170, 0, 5)
StatsFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
StatsFrame.Parent = TopBar
local StatsCorner = Instance.new("UICorner")
StatsCorner.CornerRadius = UDim.new(0, 5)
StatsCorner.Parent = StatsFrame
local StatsLabel = Instance.new("TextLabel")
StatsLabel.Size = UDim2.new(1, 0, 1, 0)
StatsLabel.BackgroundTransparency = 1
StatsLabel.Text = "FPS: -- | Ping: --"
StatsLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
StatsLabel.TextSize = 14
StatsLabel.Font = Enum.Font.SourceSans
StatsLabel.TextXAlignment = Enum.TextXAlignment.Center
StatsLabel.Parent = StatsFrame

-- Update FPS and Ping
local lastUpdate = 0
local frameCount = 0
RunService.RenderStepped:Connect(function(deltaTime)
    frameCount = frameCount + 1
    if tick() - lastUpdate >= 1 then
        local fps = math.floor(frameCount / (tick() - lastUpdate))
        local ping = math.floor(Players.LocalPlayer:GetNetworkPing() * 1000)
        StatsLabel.Text = string.format("FPS: %d | Ping: %dms", fps, ping)
        frameCount = 0
        lastUpdate = tick()
    end
end)

local CloseButton = Instance.new("TextButton")
CloseButton.Size = UDim2.new(0, 30, 0, 30)
CloseButton.Position = UDim2.new(1, -40, 0, 5)
CloseButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
CloseButton.Text = "X"
CloseButton.TextColor3 = Color3.fromRGB(0, 0, 0)
CloseButton.TextSize = 16
CloseButton.Font = Enum.Font.SourceSansBold
CloseButton.Parent = TopBar
CloseButton.MouseButton1Click:Connect(function()
    for _, conn in pairs(Connections) do pcall(function() conn:Disconnect() end) end
    if FlyBodyVelocity then FlyBodyVelocity:Destroy() end
    if FOVCircle then FOVCircle:Remove() end
    for player, esp in pairs(ESP) do
        for _, obj in pairs(esp) do pcall(function() obj:Remove() end) end
    end
    if ProfileFrame then ProfileFrame:Destroy() end
    MainFrame:Destroy()
end)
local CloseCorner = Instance.new("UICorner")
CloseCorner.CornerRadius = UDim.new(0, 5)
CloseCorner.Parent = CloseButton

local Sidebar = Instance.new("Frame")
Sidebar.Size = UDim2.new(0, 150, 1, -40)
Sidebar.Position = UDim2.new(0, 0, 0, 40)
Sidebar.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
Sidebar.Parent = MainFrame

local SidebarLayout = Instance.new("UIListLayout")
SidebarLayout.SortOrder = Enum.SortOrder.LayoutOrder
SidebarLayout.Padding = UDim.new(0, 5)
SidebarLayout.Parent = Sidebar
local SidebarPadding = Instance.new("UIPadding")
SidebarPadding.PaddingTop = UDim.new(0, 10)
SidebarPadding.Parent = Sidebar

local Content = Instance.new("Frame")
Content.Size = UDim2.new(1, -150, 1, -40)
Content.Position = UDim2.new(0, 150, 0, 40)
Content.BackgroundTransparency = 1
Content.Parent = MainFrame

local Pages = {}
local ActiveTab = nil
local function CreateTab(name)
    local TabButton = Instance.new("TextButton")
    TabButton.Size = UDim2.new(1, -20, 0, 40)
    TabButton.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
    TabButton.Text = name
    TabButton.TextColor3 = Color3.fromRGB(200, 200, 200)
    TabButton.TextSize = 16
    TabButton.Font = Enum.Font.SourceSans
    TabButton.Parent = Sidebar

    local ButtonCorner = Instance.new("UICorner")
    ButtonCorner.CornerRadius = UDim.new(0, 5)
    ButtonCorner.Parent = TabButton

    local Page = Instance.new("ScrollingFrame")
    Page.Size = UDim2.new(1, -10, 1, -10)
    Page.Position = UDim2.new(0, 5, 0, 5)
    Page.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    Page.ScrollBarThickness = 3
    Page.ScrollBarImageColor3 = Color3.fromRGB(255, 255, 255)
    Page.Visible = false
    Page.Parent = Content

    local PageLayout = Instance.new("UIListLayout")
    PageLayout.SortOrder = Enum.SortOrder.LayoutOrder
    PageLayout.Padding = UDim.new(0, 8)
    PageLayout.Parent = Page
    local PagePadding = Instance.new("UIPadding")
    PagePadding.PaddingLeft = UDim.new(0, 10)
    PagePadding.Parent = Page

    Pages[name] = Page
    TabButton.MouseButton1Click:Connect(function()
        for _, page in pairs(Pages) do page.Visible = false end
        Page.Visible = true
        ActiveTab = name
        for _, button in pairs(Sidebar:GetChildren()) do
            if button:IsA("TextButton") then
                button.BackgroundColor3 = (button.Text == name) and Color3.fromRGB(50, 50, 50) or Color3.fromRGB(35, 35, 35)
                button.TextColor3 = (button.Text == name) and Color3.fromRGB(255, 255, 255) or Color3.fromRGB(200, 200, 200)
            end
        end
        TweenService:Create(Page, TweenInfo.new(0.2), {BackgroundTransparency = 0}):Play()
    end)

    if not ActiveTab then
        ActiveTab = name
        Page.Visible = true
        TabButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
        TabButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    end

    return Page
end

local CombatPage = CreateTab("Combat")
local MovementPage = CreateTab("Movement")
local VisualsPage = CreateTab("Visuals")
local MiscPage = CreateTab("Misc")

-- UI Components
local function CreateToggle(parent, name, callback)
    local ToggleFrame = Instance.new("Frame")
    ToggleFrame.Size = UDim2.new(1, -20, 0, 35)
    ToggleFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    ToggleFrame.Parent = parent

    local ToggleCorner = Instance.new("UICorner")
    ToggleCorner.CornerRadius = UDim.new(0, 6)
    ToggleCorner.Parent = ToggleFrame

    local Label = Instance.new("TextLabel")
    Label.Size = UDim2.new(0.75, 0, 1, 0)
    Label.BackgroundTransparency = 1
    Label.Text = name
    Label.TextColor3 = Color3.fromRGB(255, 255, 255)
    Label.TextSize = 16
    Label.Font = Enum.Font.SourceSans
    Label.TextXAlignment = Enum.TextXAlignment.Left
    Label.Parent = ToggleFrame
    local LabelPadding = Instance.new("UIPadding")
    LabelPadding.PaddingLeft = UDim.new(0, 12)
    LabelPadding.Parent = Label

    local Switch = Instance.new("TextButton")
    Switch.Size = UDim2.new(0, 50, 0, 25)
    Switch.Position = UDim2.new(1, -60, 0.5, -12.5)
    Switch.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
    Switch.Text = ""
    Switch.Parent = ToggleFrame
    local SwitchCorner = Instance.new("UICorner")
    SwitchCorner.CornerRadius = UDim.new(0, 12)
    SwitchCorner.Parent = Switch

    local Knob = Instance.new("Frame")
    Knob.Size = UDim2.new(0, 21, 0, 21)
    Knob.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    Knob.Parent = Switch
    local KnobCorner = Instance.new("UICorner")
    KnobCorner.CornerRadius = UDim.new(0, 10)
    KnobCorner.Parent = Knob

    Toggles[name] = false
    Switch.MouseButton1Click:Connect(function()
        Toggles[name] = not Toggles[name]
        TweenService:Create(Knob, TweenInfo.new(0.2), {Position = Toggles[name] and UDim2.new(1, -21, 0, 0) or UDim2.new(0, 0, 0, 0)}):Play()
        TweenService:Create(Switch, TweenInfo.new(0.2), {BackgroundColor3 = Toggles[name] and Color3.fromRGB(0, 150, 0) or Color3.fromRGB(60, 60, 60)}):Play()
        callback(Toggles[name])
    end)
    parent.CanvasSize = UDim2.new(0, 0, 0, parent.UIListLayout.AbsoluteContentSize.Y + 10)
end

local function CreateSlider(parent, name, min, max, default, callback)
    local SliderFrame = Instance.new("Frame")
    SliderFrame.Size = UDim2.new(1, -20, 0, 50)
    SliderFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    SliderFrame.Parent = parent

    local SliderCorner = Instance.new("UICorner")
    SliderCorner.CornerRadius = UDim.new(0, 6)
    SliderCorner.Parent = SliderFrame

    local Label = Instance.new("TextLabel")
    Label.Size = UDim2.new(1, 0, 0, 20)
    Label.BackgroundTransparency = 1
    Label.Text = name .. ": " .. default
    Label.TextColor3 = Color3.fromRGB(255, 255, 255)
    Label.TextSize = 14
    Label.Font = Enum.Font.SourceSans
    Label.TextXAlignment = Enum.TextXAlignment.Left
    Label.Parent = SliderFrame
    local LabelPadding = Instance.new("UIPadding")
    LabelPadding.PaddingLeft = UDim.new(0, 12)
    LabelPadding.Parent = Label

    local SliderBar = Instance.new("Frame")
    SliderBar.Size = UDim2.new(1, -30, 0, 8)
    SliderBar.Position = UDim2.new(0, 15, 0, 25)
    SliderBar.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    SliderBar.Parent = SliderFrame
    local BarCorner = Instance.new("UICorner")
    BarCorner.CornerRadius = UDim.new(0, 4)
    BarCorner.Parent = SliderBar

    local Fill = Instance.new("Frame")
    Fill.Size = UDim2.new((default - min) / (max - min), 0, 1, 0)
    Fill.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    Fill.Parent = SliderBar
    local FillCorner = Instance.new("UICorner")
    FillCorner.CornerRadius = UDim.new(0, 4)
    FillCorner.Parent = Fill

    local SliderButton = Instance.new("TextButton")
    SliderButton.Size = UDim2.new(1, 0, 1, 0)
    SliderButton.BackgroundTransparency = 1
    SliderButton.Text = ""
    SliderButton.Parent = SliderBar
    SliderButton.MouseButton1Down:Connect(function()
        local connection = RunService.RenderStepped:Connect(function()
            local mousePos = UserInputService:GetMouseLocation()
            local barPos = SliderBar.AbsolutePosition
            local barSize = SliderBar.AbsoluteSize.X
            local relative = math.clamp((mousePos.X - barPos.X) / barSize, 0, 1)
            local value = math.floor(min + (max - min) * relative)
            Settings[name] = value
            Label.Text = name .. ": " .. value
            Fill.Size = UDim2.new(relative, 0, 1, 0)
            callback(value)
        end)
        local endConn = UserInputService.InputEnded:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                connection:Disconnect()
                endConn:Disconnect()
            end
        end)
        table.insert(Connections, connection)
        table.insert(Connections, endConn)
    end)
    parent.CanvasSize = UDim2.new(0, 0, 0, parent.UIListLayout.AbsoluteContentSize.Y + 10)
end

local function CreateFOVSlider(parent, name, default, callback)
    local SliderFrame = Instance.new("Frame")
    SliderFrame.Size = UDim2.new(1, -20, 0, 50)
    SliderFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    SliderFrame.Parent = parent

    local SliderCorner = Instance.new("UICorner")
    SliderCorner.CornerRadius = UDim.new(0, 6)
    SliderCorner.Parent = SliderFrame

    local Label = Instance.new("TextLabel")
    Label.Size = UDim2.new(0.6, 0, 0, 20)
    Label.BackgroundTransparency = 1
    Label.Text = name .. ": " .. default
    Label.TextColor3 = Color3.fromRGB(255, 255, 255)
    Label.TextSize = 14
    Label.Font = Enum.Font.SourceSans
    Label.TextXAlignment = Enum.TextXAlignment.Left
    Label.Parent = SliderFrame
    local LabelPadding = Instance.new("UIPadding")
    LabelPadding.PaddingLeft = UDim.new(0, 12)
    LabelPadding.Parent = Label

    local ValueBox = Instance.new("TextBox")
    ValueBox.Size = UDim2.new(0.3, 0, 0, 20)
    ValueBox.Position = UDim2.new(0.7, 0, 0, 0)
    ValueBox.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    ValueBox.Text = tostring(default)
    ValueBox.TextColor3 = Color3.fromRGB(255, 255, 255)
    ValueBox.TextSize = 14
    ValueBox.Font = Enum.Font.SourceSans
    ValueBox.Parent = SliderFrame
    local ValueBoxCorner = Instance.new("UICorner")
    ValueBoxCorner.CornerRadius = UDim.new(0, 6)
    ValueBoxCorner.Parent = ValueBox

    local SliderBar = Instance.new("Frame")
    SliderBar.Size = UDim2.new(1, -30, 0, 8)
    SliderBar.Position = UDim2.new(0, 15, 0, 25)
    SliderBar.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    SliderBar.Parent = SliderFrame
    local BarCorner = Instance.new("UICorner")
    BarCorner.CornerRadius = UDim.new(0, 4)
    BarCorner.Parent = SliderBar

    local Fill = Instance.new("Frame")
    Fill.Size = UDim2.new((default - 60) / (120 - 60), 0, 1, 0)
    Fill.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    Fill.Parent = SliderBar
    local FillCorner = Instance.new("UICorner")
    FillCorner.CornerRadius = UDim.new(0, 4)
    FillCorner.Parent = Fill

    local SliderButton = Instance.new("TextButton")
    SliderButton.Size = UDim2.new(1, 0, 1, 0)
    SliderButton.BackgroundTransparency = 1
    SliderButton.Text = ""
    SliderButton.Parent = SliderBar
    SliderButton.MouseButton1Down:Connect(function()
        local connection = RunService.RenderStepped:Connect(function()
            local mousePos = UserInputService:GetMouseLocation()
            local barPos = SliderBar.AbsolutePosition
            local barSize = SliderBar.AbsoluteSize.X
            local relative = math.clamp((mousePos.X - barPos.X) / barSize, 0, 1)
            local value = math.floor(60 + (120 - 60) * relative)
            Settings[name] = value
            Label.Text = name .. ": " .. value
            ValueBox.Text = tostring(value)
            Fill.Size = UDim2.new(relative, 0, 1, 0)
            callback(value)
        end)
        local endConn = UserInputService.InputEnded:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                connection:Disconnect()
                endConn:Disconnect()
            end
        end)
        table.insert(Connections, connection)
        table.insert(Connections, endConn)
    end)

    ValueBox.FocusLost:Connect(function(enterPressed)
        if enterPressed then
            local value = tonumber(ValueBox.Text)
            if value then
                value = math.clamp(value, 60, 120)
                Settings[name] = value
                Label.Text = name .. ": " .. value
                Fill.Size = UDim2.new((value - 60) / (120 - 60), 0, 1, 0)
                callback(value)
            else
                ValueBox.Text = tostring(Settings[name])
            end
        end
    end)
    parent.CanvasSize = UDim2.new(0, 0, 0, parent.UIListLayout.AbsoluteContentSize.Y + 10)
end

-- Profile Frame
local ProfileFrame = Instance.new("Frame")
ProfileFrame.Size = UDim2.new(0, 140, 0, 60)
ProfileFrame.Position = UDim2.new(0, 5, 1, -65)
ProfileFrame.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
ProfileFrame.BorderSizePixel = 0
ProfileFrame.Parent = MainFrame
local ProfileCorner = Instance.new("UICorner")
ProfileCorner.CornerRadius = UDim.new(0, 6)
ProfileCorner.Parent = ProfileFrame

local ProfileLayout = Instance.new("UIListLayout")
ProfileLayout.FillDirection = Enum.FillDirection.Vertical
ProfileLayout.VerticalAlignment = Enum.VerticalAlignment.Center
ProfileLayout.Padding = UDim.new(0, 2)
ProfileLayout.Parent = ProfileFrame

local NameLabel = Instance.new("TextLabel")
NameLabel.Size = UDim2.new(1, 0, 0.5, 0)
NameLabel.BackgroundTransparency = 1
NameLabel.Text = "Name: " .. LocalPlayer.Name
NameLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
NameLabel.TextSize = 14
NameLabel.Font = Enum.Font.SourceSansSemibold
NameLabel.TextXAlignment = Enum.TextXAlignment.Left
NameLabel.Parent = ProfileFrame
local NamePadding = Instance.new("UIPadding")
NamePadding.PaddingLeft = UDim.new(0, 5)
NamePadding.Parent = NameLabel

local UserIdLabel = Instance.new("TextLabel")
UserIdLabel.Size = UDim2.new(1, 0, 0.5, 0)
UserIdLabel.BackgroundTransparency = 1
UserIdLabel.Text = "ID: " .. LocalPlayer.UserId
UserIdLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
UserIdLabel.TextSize = 14
UserIdLabel.Font = Enum.Font.SourceSans
UserIdLabel.TextXAlignment = Enum.TextXAlignment.Left
UserIdLabel.Parent = ProfileFrame
local UserIdPadding = Instance.new("UIPadding")
UserIdPadding.PaddingLeft = UDim.new(0, 5)
UserIdPadding.Parent = UserIdLabel

-- Important Reminders
local FOVCircle = Drawing.new("Circle")
FOVCircle.Visible = false
FOVCircle.Radius = Settings.FOVSize
FOVCircle.Thickness = 2
FOVCircle.Position = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
FOVCircle.Filled = false
FOVCircle.Color = Color3.fromRGB(255, 255, 255)

local function ToggleAimbot(state)
    Toggles.Aimbot = state
    FOVCircle.Visible = state and Toggles.ShowFOV
    if state then
        RunService:BindToRenderStep("Aimbot", Enum.RenderPriority.Camera.Value + 1, function()
            if not Toggles.Aimbot or not UserInputService:IsMouseButtonPressed(aimKey) then
                lastTarget = nil
                return
            end
            if not LocalPlayer.Character or not LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                lastTarget = nil
                return
            end
            local closest, closestDist = nil, Settings.FOVSize
            for _, player in pairs(Players:GetPlayers()) do
                if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("Head") and player.Character:FindFirstChild("Humanoid") and player.Character.Humanoid.Health > 0 then
                    local isEnemy = not Toggles.TeamCheck or not hasTeams() or player.Team ~= LocalPlayer.Team
                    if isEnemy then
                        local headPos, onScreen = Camera:WorldToViewportPoint(player.Character.Head.Position)
                        local dist3D = (LocalPlayer.Character.HumanoidRootPart.Position - player.Character.Head.Position).Magnitude
                        if onScreen and dist3D <= Settings.AimbotDistance then
                            local dist2D = (Vector2.new(headPos.X, headPos.Y) - Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)).Magnitude
                            if dist2D < closestDist then
                                closest = player.Character.Head
                                closestDist = dist2D
                            end
                        end
                    end
                end
            end
            if closest then
                if lastTarget ~= closest then lastTarget = closest end
                Camera.CFrame = CFrame.new(Camera.CFrame.Position, closest.Position)
            else
                lastTarget = nil
            end
        end)
    else
        RunService:UnbindFromRenderStep("Aimbot")
        FOVCircle.Visible = false
        lastTarget = nil
    end
end

local function ToggleTeamCheck(state) Toggles.TeamCheck = state end
local function ToggleShowFOV(state) Toggles.ShowFOV = state; FOVCircle.Visible = Toggles.Aimbot and state end
local function ToggleEnemyTPKill(state)
    if state then
        RunService:BindToRenderStep("EnemyTP-Kill", Enum.RenderPriority.Character.Value + 1, function()
            if not LocalPlayer.Character or not LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then return end
            local myCFrame = LocalPlayer.Character.HumanoidRootPart.CFrame
            local forwardOffset = myCFrame.LookVector * 5
            for _, player in pairs(Players:GetPlayers()) do
                if player ~= LocalPlayer and isValidCharacter(player) then
                    local isEnemy = not Toggles.TeamCheck or not hasTeams() or player.Team ~= LocalPlayer.Team
                    if isEnemy then
                        player.Character.HumanoidRootPart.CFrame = CFrame.new(myCFrame.Position + forwardOffset + Vector3.new(math.random(-2, 2), 0, math.random(-1, 1)))
                        player.Character.Humanoid.WalkSpeed = 0
                        player.Character.Humanoid.JumpPower = 0
                    end
                end
            end
        end)
    else
        RunService:UnbindFromRenderStep("EnemyTP-Kill")
        for _, player in pairs(Players:GetPlayers()) do
            if player ~= LocalPlayer and isValidCharacter(player) then
                player.Character.Humanoid.WalkSpeed = 16
                player.Character.Humanoid.JumpPower = 50
            end
        end
    end
end

local function ToggleSpinBot(state)
    Toggles.SpinBot = state
    if state then
        RunService:BindToRenderStep("SpinBot", Enum.RenderPriority.Character.Value + 1, function(deltaTime)
            if not Toggles.SpinBot or not LocalPlayer.Character then return end
            local root = LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
            if root then
                local spinSpeed = math.rad(Settings.SpinBotSpeed * deltaTime * 10)
                root.CFrame = root.CFrame * CFrame.Angles(0, spinSpeed, 0)
            end
        end)
    else
        RunService:UnbindFromRenderStep("SpinBot")
    end
end

local function ToggleNoClip(state)
    Toggles.NoClip = state
    if state then
        RunService:BindToRenderStep("NoClip", Enum.RenderPriority.Character.Value + 1, function()
            if LocalPlayer.Character and Toggles.NoClip then
                for _, part in pairs(LocalPlayer.Character:GetDescendants()) do
                    if part:IsA("BasePart") then part.CanCollide = false end
                end
            end
        end)
    else
        RunService:UnbindFromRenderStep("NoClip")
        if LocalPlayer.Character then
            for _, part in pairs(LocalPlayer.Character:GetDescendants()) do
                if part:IsA("BasePart") then part.CanCollide = true end
            end
        end
    end
end

local function ToggleInfJump(state)
    Toggles.InfJump = state
    if state then
        local conn = UserInputService.JumpRequest:Connect(function()
            if LocalPlayer.Character and Toggles.InfJump then
                local humanoid = LocalPlayer.Character:FindFirstChild("Humanoid")
                if humanoid then humanoid:ChangeState(Enum.HumanoidStateType.Jumping) end
            end
        end)
        table.insert(Connections, conn)
    end
end

local function ToggleSpeedHack(state)
    Toggles.SpeedHack = state
    if state then
        RunService:BindToRenderStep("SpeedHack", Enum.RenderPriority.Character.Value + 1, function()
            if LocalPlayer.Character and Toggles.SpeedHack then
                local humanoid = LocalPlayer.Character:FindFirstChild("Humanoid")
                if humanoid then humanoid.WalkSpeed = Settings.SpeedScale end
            end
        end)
    else
        RunService:UnbindFromRenderStep("SpeedHack")
        if LocalPlayer.Character then
            local humanoid = LocalPlayer.Character:FindFirstChild("Humanoid")
            if humanoid then humanoid.WalkSpeed = 16 end
        end
    end
end

local function ToggleFly(state)
    Toggles.Fly = state
    if FlyBodyVelocity then FlyBodyVelocity:Destroy() end
    RunService:UnbindFromRenderStep("Fly")
    if state and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
        FlyBodyVelocity = Instance.new("BodyVelocity")
        FlyBodyVelocity.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
        FlyBodyVelocity.Velocity = Vector3.new(0, 0, 0)
        FlyBodyVelocity.Parent = LocalPlayer.Character.HumanoidRootPart
        RunService:BindToRenderStep("Fly", Enum.RenderPriority.Input.Value + 1, function()
            if not Toggles.Fly then return end
            local moveDir = Vector3.new(0, 0, 0)
            if UserInputService:IsKeyDown(Enum.KeyCode.W) then moveDir = moveDir + Camera.CFrame.LookVector end
            if UserInputService:IsKeyDown(Enum.KeyCode.S) then moveDir = moveDir - Camera.CFrame.LookVector end
            if UserInputService:IsKeyDown(Enum.KeyCode.D) then moveDir = moveDir + Camera.CFrame.RightVector end
            if UserInputService:IsKeyDown(Enum.KeyCode.A) then moveDir = moveDir - Camera.CFrame.RightVector end
            if UserInputService:IsKeyDown(Enum.KeyCode.Space) then moveDir = moveDir + Vector3.new(0, 1, 0) end
            if UserInputService:IsKeyDown(Enum.KeyCode.LeftShift) then moveDir = moveDir - Vector3.new(0, 1, 0) end
            FlyBodyVelocity.Velocity = moveDir * Settings.FlySpeed
        end)
    end
end

local function ToggleJumpBoost(state)
    Toggles.JumpBoost = state
    if state then
        RunService:BindToRenderStep("JumpBoost", Enum.RenderPriority.Character.Value + 1, function()
            if LocalPlayer.Character and Toggles.JumpBoost then
                local humanoid = LocalPlayer.Character:FindFirstChild("Humanoid")
                if humanoid then
                    humanoid.JumpPower = Settings.JumpBoostScale
                    humanoid.UseJumpPower = true
                end
            end
        end)
    else
        RunService:UnbindFromRenderStep("JumpBoost")
        if LocalPlayer.Character then
            local humanoid = LocalPlayer.Character:FindFirstChild("Humanoid")
            if humanoid then humanoid.JumpPower = 50 end
        end
    end
end

local function ToggleSuperJump(state)
    Toggles.SuperJump = state
    if state then
        RunService:BindToRenderStep("SuperJump", Enum.RenderPriority.Character.Value + 1, function()
            if LocalPlayer.Character and Toggles.SuperJump and UserInputService:IsKeyDown(Enum.KeyCode.Space) then
                local root = LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
                if root then root.Velocity = Vector3.new(root.Velocity.X, Settings.SuperJumpScale, root.Velocity.Z) end
            end
        end)
    else
        RunService:UnbindFromRenderStep("SuperJump")
    end
end

local function ToggleInvisible(state)
    Toggles.Invisible = state
    if LocalPlayer.Character then
        for _, part in pairs(LocalPlayer.Character:GetDescendants()) do
            if part:IsA("BasePart") or part:IsA("Decal") then
                part.Transparency = state and 1 or 0
            end
        end
    end
end

local function ToggleGodMode(state)
    Toggles.GodMode = state
    if state then
        RunService:BindToRenderStep("GodMode", Enum.RenderPriority.Character.Value + 1, function()
            if LocalPlayer.Character and Toggles.GodMode then
                local humanoid = LocalPlayer.Character:FindFirstChild("Humanoid")
                if humanoid then humanoid.Health = humanoid.MaxHealth end
            end
        end)
    else
        RunService:UnbindFromRenderStep("GodMode")
    end
end

local function ToggleAntiAFK(state)
    Toggles.AntiAFK = state
    if state then
        RunService:BindToRenderStep("AntiAFK", Enum.RenderPriority.Character.Value + 1, function()
            if LocalPlayer.Character and Toggles.AntiAFK then
                local root = LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
                if root then root.CFrame = root.CFrame * CFrame.new(math.random(-0.05, 0.05), 0, math.random(-0.05, 0.05)) end
            end
        end)
    else
        RunService:UnbindFromRenderStep("AntiAFK")
    end
end

local function ToggleJerk(state)
    Toggles.Jerk = state
    local isR6 = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Torso") ~= nil
    if state then
        if not JerkInstance then
            JerkInstance = loadstring(game:HttpGet(isR6 and "https://pastefy.app/wa3v2Vgm/raw" or "https://pastefy.app/YZoglOyJ/raw"))()
        end
    else
        JerkInstance = nil
    end
end

local function ToggleBHOP(state)
    Toggles.BHOP = state
    if state then
        bhopConnection = RunService:BindToRenderStep("BHOP", Enum.RenderPriority.Character.Value + 1, function(deltaTime)
            if not Toggles.BHOP then return end
            local character = LocalPlayer.Character
            if not character then return end
            local humanoid = character:FindFirstChild("Humanoid")
            local rootPart = character:FindFirstChild("HumanoidRootPart")
            if not humanoid or not rootPart then return end

            humanoid.JumpPower = BHOP_JUMP_POWER

            if isBhopping and humanoid.FloorMaterial ~= Enum.Material.Air and tick() - lastJumpTime > JUMP_COOLDOWN then
                humanoid.Jump = true
                lastJumpTime = tick()
                local moveDirection = humanoid.MoveDirection
                if moveDirection.Magnitude > 0 then
                    local velocity = rootPart.Velocity
                    local speedBoost = moveDirection * Settings.BHOPSpeed
                    local newVelocity = Vector3.new(
                        math.clamp(velocity.X + speedBoost.X, -BHOP_MAX_SPEED, BHOP_MAX_SPEED),
                        velocity.Y,
                        math.clamp(velocity.Z + speedBoost.Z, -BHOP_MAX_SPEED, BHOP_MAX_SPEED)
                    )
                    rootPart.Velocity = newVelocity
                end
            end

            if humanoid.FloorMaterial == Enum.Material.Air then
                local moveDirection = humanoid.MoveDirection
                if moveDirection.Magnitude > 0 then
                    local currentVelocity = rootPart.Velocity
                    local airAdjust = moveDirection * (Settings.BHOPSpeed / 25) * BHOP_AIR_CONTROL * deltaTime * 100
                    rootPart.Velocity = Vector3.new(
                        math.clamp(currentVelocity.X + airAdjust.X, -BHOP_MAX_SPEED, BHOP_MAX_SPEED),
                        currentVelocity.Y,
                        math.clamp(currentVelocity.Z + airAdjust.Z, -BHOP_MAX_SPEED, BHOP_MAX_SPEED)
                    )
                end
            end
        end)
        local inputBeganConn = UserInputService.InputBegan:Connect(function(input, gameProcessed)
            if input.KeyCode == Enum.KeyCode.Space and not gameProcessed then isBhopping = true end
        end)
        local inputEndedConn = UserInputService.InputEnded:Connect(function(input)
            if input.KeyCode == Enum.KeyCode.Space then isBhopping = false end
        end)
        table.insert(Connections, inputBeganConn)
        table.insert(Connections, inputEndedConn)
    else
        RunService:UnbindFromRenderStep("BHOP")
        bhopConnection = nil
        isBhopping = false
        if LocalPlayer.Character then
            local humanoid = LocalPlayer.Character:FindFirstChild("Humanoid")
            if humanoid then humanoid.JumpPower = 50 end
        end
    end
end

local function ToggleCameraZoom(state)
    Toggles.CameraZoom = state
    if state then
        local zoomBeganConn = UserInputService.InputBegan:Connect(function(input, gameProcessed)
            if not gameProcessed and input.KeyCode == Enum.KeyCode.C then isZooming = true end
        end)
        local zoomEndedConn = UserInputService.InputEnded:Connect(function(input)
            if input.KeyCode == Enum.KeyCode.C then isZooming = false end
        end)
        table.insert(Connections, zoomBeganConn)
        table.insert(Connections, zoomEndedConn)
        RunService:BindToRenderStep("CameraZoom", Enum.RenderPriority.Camera.Value + 1, function()
            if isZooming then Camera.FieldOfView = 70 - Settings.CameraZoomScale
            elseif Camera.FieldOfView ~= Settings.GameFOV then Camera.FieldOfView = Settings.GameFOV end
        end)
    else
        RunService:UnbindFromRenderStep("CameraZoom")
        isZooming = false
        Camera.FieldOfView = Settings.GameFOV
    end
end

local function CreateBoxESP(player)
    if player == LocalPlayer then return end
    local Box = Drawing.new("Square")
    Box.Thickness = Settings.BoxThickness
    Box.Filled = false
    Box.Transparency = 0.9
    Box.Color = Color3.fromRGB(255, 255, 255)
    local Tracer = Drawing.new("Line")
    Tracer.Thickness = 1
    Tracer.Transparency = 0.9
    Tracer.Color = Color3.fromRGB(255, 255, 255)
    local NameLabel = Drawing.new("Text")
    NameLabel.Text = player.Name
    NameLabel.Size = 18
    NameLabel.Center = true
    NameLabel.Outline = true
    NameLabel.Color = Color3.fromRGB(255, 255, 255)
    local HealthLabel = Drawing.new("Text")
    HealthLabel.Size = 16
    HealthLabel.Center = true
    HealthLabel.Outline = true
    HealthLabel.Color = Color3.fromRGB(255, 255, 255)
    local DistanceLabel = Drawing.new("Text")
    DistanceLabel.Size = 16
    DistanceLabel.Center = true
    DistanceLabel.Outline = true
    DistanceLabel.Color = Color3.fromRGB(255, 255, 255)
    ESP[player] = {Box = Box, Tracer = Tracer, NameLabel = NameLabel, HealthLabel = HealthLabel, DistanceLabel = DistanceLabel}

    RunService:BindToRenderStep("BoxESP2D_" .. player.Name, Enum.RenderPriority.Character.Value + 1, function()
        local root = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
        local humanoid = player.Character and player.Character:FindFirstChild("Humanoid")
        if root and humanoid and humanoid.Health > 0 then
            local isTeammate = Toggles.TeamCheck and hasTeams() and player.Team == LocalPlayer.Team
            local dist = (LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") and (LocalPlayer.Character.HumanoidRootPart.Position - root.Position).Magnitude) or math.huge
            if dist <= Settings.ESPDistance and not isTeammate then
                local rootPos, onScreen = Camera:WorldToViewportPoint(root.Position)
                if onScreen then
                    local character = player.Character
                    local parts = character:GetChildren()
                    local minPos, maxPos = Vector3.new(math.huge, math.huge, math.huge), Vector3.new(-math.huge, -math.huge, -math.huge)
                    for _, part in ipairs(parts) do
                        if part:IsA("BasePart") and part.Name ~= "HumanoidRootPart" then
                            local partCFrame = part.CFrame
                            local size = part.Size * 0.5
                            local corners = {
                                partCFrame * Vector3.new(-size.X, -size.Y, -size.Z),
                                partCFrame * Vector3.new(-size.X, -size.Y, size.Z),
                                partCFrame * Vector3.new(-size.X, size.Y, -size.Z),
                                partCFrame * Vector3.new(-size.X, size.Y, size.Z),
                                partCFrame * Vector3.new(size.X, -size.Y, -size.Z),
                                partCFrame * Vector3.new(size.X, -size.Y, size.Z),
                                partCFrame * Vector3.new(size.X, size.Y, -size.Z),
                                partCFrame * Vector3.new(size.X, size.Y, size.Z)
                            }
                            for _, corner in ipairs(corners) do
                                local cornerPos = Camera:WorldToViewportPoint(corner)
                                minPos = Vector3.new(math.min(minPos.X, cornerPos.X), math.min(minPos.Y, cornerPos.Y), math.min(minPos.Z, cornerPos.Z))
                                maxPos = Vector3.new(math.max(maxPos.X, cornerPos.X), math.max(maxPos.Y, cornerPos.Y), math.max(maxPos.Z, cornerPos.Z))
                            end
                        end
                    end
                    local width = (maxPos.X - minPos.X) * 1.02
                    local height = (maxPos.Y - minPos.Y) * 1.02
                    local x = minPos.X - (width - (maxPos.X - minPos.X)) / 2
                    local y = minPos.Y - (height - (maxPos.Y - minPos.Y)) / 2
                    Box.Position = Vector2.new(x, y)
                    Box.Size = Vector2.new(width, height)
                    Box.Visible = Toggles.BoxESP
                    local feetPos = Camera:WorldToViewportPoint(root.Position - Vector3.new(0, 3, 0))
                    Tracer.From = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y)
                    Tracer.To = Vector2.new(feetPos.X, feetPos.Y)
                    Tracer.Visible = Toggles.Tracers and onScreen
                    HealthLabel.Text = math.floor(humanoid.Health) .. "/" .. math.floor(humanoid.MaxHealth)
                    HealthLabel.Position = Vector2.new(x + width / 2, y - 20)
                    HealthLabel.Visible = Toggles.HealthESP and onScreen
                    NameLabel.Position = Vector2.new(x + width / 2, y - 40)
                    NameLabel.Visible = Toggles.NamesESP and onScreen
                    DistanceLabel.Text = math.floor(dist) .. " studs"
                    DistanceLabel.Position = Vector2.new(feetPos.X, feetPos.Y + 20)
                    DistanceLabel.Visible = Toggles.DistanceESP and onScreen
                else
                    Box.Visible = false
                    Tracer.Visible = false
                    NameLabel.Visible = false
                    HealthLabel.Visible = false
                    DistanceLabel.Visible = false
                end
            else
                Box.Visible = false
                Tracer.Visible = false
                NameLabel.Visible = false
                HealthLabel.Visible = false
                DistanceLabel.Visible = false
            end
        else
            Box.Visible = false
            Tracer.Visible = false
            NameLabel.Visible = false
            HealthLabel.Visible = false
            DistanceLabel.Visible = false
        end
    end)
    local charAddedConn = player.CharacterAdded:Connect(function() task.wait(0.5) end)
    table.insert(Connections, charAddedConn)
end

local function RefreshESP()
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and not ESP[player] then CreateBoxESP(player) end
    end
    for player, esp in pairs(ESP) do
        esp.Box.Thickness = Settings.BoxThickness
        esp.Box.Color = Color3.fromRGB(255, 255, 255)
        esp.Box.Visible = Toggles.BoxESP
        esp.Tracer.Color = Color3.fromRGB(255, 255, 255)
        esp.Tracer.Visible = Toggles.Tracers
        esp.HealthLabel.Color = Color3.fromRGB(255, 255, 255)
        esp.HealthLabel.Visible = Toggles.HealthESP
        esp.NameLabel.Color = Color3.fromRGB(255, 255, 255)
        esp.NameLabel.Visible = Toggles.NamesESP
        esp.DistanceLabel.Color = Color3.fromRGB(255, 255, 255)
        esp.DistanceLabel.Visible = Toggles.DistanceESP
    end
end

local function ToggleBoxESP(state) Toggles.BoxESP = state; RefreshESP() end
local function ToggleTracers(state) Toggles.Tracers = state; RefreshESP() end
local function ToggleHealthESP(state) Toggles.HealthESP = state; RefreshESP() end
local function ToggleNamesESP(state) Toggles.NamesESP = state; RefreshESP() end
local function ToggleDistanceESP(state) Toggles.DistanceESP = state; RefreshESP() end

-- Aimbot Key Toggle
local AimKeyFrame = Instance.new("Frame")
AimKeyFrame.Size = UDim2.new(1, -20, 0, 35)
AimKeyFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
AimKeyFrame.Parent = CombatPage
local AimKeyCorner = Instance.new("UICorner")
AimKeyCorner.CornerRadius = UDim.new(0, 6)
AimKeyCorner.Parent = AimKeyFrame
local AimKeyLabel = Instance.new("TextLabel")
AimKeyLabel.Size = UDim2.new(0.5, 0, 1, 0)
AimKeyLabel.BackgroundTransparency = 1
AimKeyLabel.Text = "Aimbot Key:"
AimKeyLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
AimKeyLabel.TextSize = 16
AimKeyLabel.Font = Enum.Font.SourceSans
AimKeyLabel.TextXAlignment = Enum.TextXAlignment.Left
AimKeyLabel.Parent = AimKeyFrame
local AimKeyLabelPadding = Instance.new("UIPadding")
AimKeyLabelPadding.PaddingLeft = UDim.new(0, 12)
AimKeyLabelPadding.Parent = AimKeyLabel
local AimKeyToggle = Instance.new("TextButton")
AimKeyToggle.Size = UDim2.new(0.4, 0, 0.8, 0)
AimKeyToggle.Position = UDim2.new(0.55, 0, 0.1, 0)
AimKeyToggle.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
AimKeyToggle.Text = aimKeyName
AimKeyToggle.TextColor3 = Color3.fromRGB(255, 255, 255)
AimKeyToggle.TextSize = 16
AimKeyToggle.Font = Enum.Font.SourceSans
AimKeyToggle.Parent = AimKeyFrame
local AimKeyToggleCorner = Instance.new("UICorner")
AimKeyToggleCorner.CornerRadius = UDim.new(0, 6)
AimKeyToggleCorner.Parent = AimKeyToggle
AimKeyToggle.MouseButton1Click:Connect(function()
    aimKey = (aimKey == Enum.UserInputType.MouseButton1) and Enum.UserInputType.MouseButton2 or Enum.UserInputType.MouseButton1
    aimKeyName = getInputName(aimKey)
    AimKeyToggle.Text = aimKeyName
end)
CombatPage.CanvasSize = UDim2.new(0, 0, 0, CombatPage.UIListLayout.AbsoluteContentSize.Y + 10)

-- Assign Features
CreateToggle(CombatPage, "Aimbot", ToggleAimbot)
CreateToggle(CombatPage, "TeamCheck", ToggleTeamCheck)
CreateToggle(CombatPage, "ShowFOV", ToggleShowFOV)
CreateSlider(CombatPage, "FOVSize", 50, 500, Settings.FOVSize, function(value)
    Settings.FOVSize = value
    FOVCircle.Radius = value
end)
CreateSlider(CombatPage, "AimbotDistance", 100, 2000, Settings.AimbotDistance, function(value) Settings.AimbotDistance = value end)
CreateToggle(CombatPage, "EnemyTP-Kill", ToggleEnemyTPKill)

CreateToggle(MovementPage, "NoClip", ToggleNoClip)
CreateToggle(MovementPage, "InfJump", ToggleInfJump)
CreateToggle(MovementPage, "SpeedHack", ToggleSpeedHack)
CreateToggle(MovementPage, "Fly", ToggleFly)
CreateToggle(MovementPage, "JumpBoost", ToggleJumpBoost)
CreateToggle(MovementPage, "SuperJump", ToggleSuperJump)
CreateToggle(MovementPage, "BHOP", ToggleBHOP)
CreateSlider(MovementPage, "SpeedScale", 16, 500, Settings.SpeedScale, function(value)
    Settings.SpeedScale = value
    if Toggles.SpeedHack then ToggleSpeedHack(true) end
end)
CreateSlider(MovementPage, "JumpBoostScale", 50, 500, Settings.JumpBoostScale, function(value)
    Settings.JumpBoostScale = value
    if Toggles.JumpBoost then ToggleJumpBoost(true) end
end)
CreateSlider(MovementPage, "SuperJumpScale", 50, 500, Settings.SuperJumpScale, function(value) Settings.SuperJumpScale = value end)
CreateSlider(MovementPage, "BHOPSpeed", 10, 500, Settings.BHOPSpeed, function(value) Settings.BHOPSpeed = value end)
CreateSlider(MovementPage, "FlySpeed", 10, 500, Settings.FlySpeed, function(value)
    Settings.FlySpeed = value
    if Toggles.Fly then ToggleFly(true) end
end)

CreateToggle(VisualsPage, "BoxESP", ToggleBoxESP)
CreateToggle(VisualsPage, "Tracers", ToggleTracers)
CreateToggle(VisualsPage, "HealthESP", ToggleHealthESP)
CreateToggle(VisualsPage, "NamesESP", ToggleNamesESP)
CreateToggle(VisualsPage, "DistanceESP", ToggleDistanceESP)
CreateSlider(VisualsPage, "ESPDistance", 100, 5000, 500, function(value) Settings.ESPDistance = value end)
CreateSlider(VisualsPage, "BoxThickness", 2, 10, 2, function(value) Settings.BoxThickness = value; RefreshESP() end)

CreateToggle(MiscPage, "SpinBot", ToggleSpinBot)
CreateToggle(MiscPage, "Invisible", ToggleInvisible)
CreateToggle(MiscPage, "GodMode", ToggleGodMode)
CreateToggle(MiscPage, "AntiAFK", ToggleAntiAFK)
CreateToggle(MiscPage, "Jerk", ToggleJerk)
CreateToggle(MiscPage, "CameraZoom", ToggleCameraZoom)
CreateSlider(MiscPage, "SpinBotSpeed", 10, 500, Settings.SpinBotSpeed, function(value)
    Settings.SpinBotSpeed = value
    if Toggles.SpinBot then
        ToggleSpinBot(false)
        ToggleSpinBot(true)
    end
end)
CreateFOVSlider(MiscPage, "GameFOV", Settings.GameFOV, function(value)
    Settings.GameFOV = math.clamp(value, 60, 120)
    Camera.FieldOfView = Settings.GameFOV
    RunService:BindToRenderStep("ForceFOV", Enum.RenderPriority.Camera.Value, function()
        if not isZooming and Camera.FieldOfView ~= Settings.GameFOV then Camera.FieldOfView = Settings.GameFOV end
    end)
end)
CreateSlider(MiscPage, "CameraZoomScale", 10, 500, Settings.CameraZoomScale, function(value)
    Settings.CameraZoomScale = value
    if Toggles.CameraZoom and isZooming then Camera.FieldOfView = 70 - value end
end)

-- Initialize
for _, player in pairs(Players:GetPlayers()) do CreateBoxESP(player) end
Players.PlayerAdded:Connect(CreateBoxESP)
Players.PlayerRemoving:Connect(function(player)
    if ESP[player] then
        for _, obj in pairs(ESP[player]) do pcall(function() obj:Remove() end) end
        ESP[player] = nil
    end
    RunService:UnbindFromRenderStep("BoxESP2D_" .. player.Name)
end)
RunService.RenderStepped:Connect(function()
    FOVCircle.Position = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
    FOVCircle.Radius = Settings.FOVSize
    FOVCircle.Visible = Toggles.Aimbot and Toggles.ShowFOV
end)
LocalPlayer.CharacterAdded:Connect(function() task.wait(0.5) end)

-- Hide/Unhide Toggle
local isGuiHidden = false

CloseButton.MouseButton1Click:Connect(function()
    for _, conn in pairs(Connections) do pcall(function() conn:Disconnect() end) end
    if FlyBodyVelocity then FlyBodyVelocity:Destroy() end
    if FOVCircle then FOVCircle:Remove() end
    for player, esp in pairs(ESP) do
        for _, obj in pairs(esp) do pcall(function() obj:Remove() end) end
    end
    if ProfileFrame then ProfileFrame:Destroy() end
    MainFrame:Destroy()
    isGuiHidden = false
end)

UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if input.KeyCode == Enum.KeyCode.RightShift and not gameProcessed then
        isGuiHidden = not isGuiHidden
        local targetTransparency = isGuiHidden and 1 or 0
        local targetVisible = not isGuiHidden
        local targetSize = isGuiHidden and UDim2.new(0, 0, 0, 0) or UDim2.new(0, 700, 0, 450)

        TweenService:Create(MainFrame, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
            BackgroundTransparency = targetTransparency,
            Size = targetSize
        }):Play()
        MainFrame.Visible = targetVisible

        if ProfileFrame then
            TweenService:Create(ProfileFrame, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
                BackgroundTransparency = targetTransparency
            }):Play()
            ProfileFrame.Visible = targetVisible
        end

        ScreenGui.Enabled = not isGuiHidden
    end
end)
