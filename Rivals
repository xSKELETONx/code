-- // Unleashed Aimbot Button Beast Mode with FOV Circle
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local StarterGui = game:GetService("StarterGui")
local LocalPlayer = Players.LocalPlayer
local Camera = workspace.CurrentCamera

-- // Aimbot Settings
local Aimbot = {
    Enabled = false,
    FOV = 184.7, -- Pixel-based for GUI circle and ironclad center-based targeting
    Range = 340.3, -- Stud-based range, adjustable via GUI (50-1000)
    Smoothness = 1.0, -- Adjusted range: 1 to 3 for snappy control (higher = smoother to prevent flicking)
    Keybind = Enum.KeyCode.Q, -- Toggle key
    TargetPart = "Head", -- Target hitbox
    MaxMouseDelta = 20, -- Tightened to reduce overshoot
    MaxTargetVelocity = 80, -- Slightly reduced to skip more erratic targets
    CurrentTarget = nil, -- Persistent target to avoid switching flicks
    LastTargetSwitch = 0, -- Time since last switch to add hysteresis
    TargetStickTime = 0.4 -- Increased to lock target longer and prevent flicking
}

-- // GUI Setup
local function CreateGUI()
    local ScreenGui = Instance.new("ScreenGui")
    ScreenGui.Name = "AimbotMenu"
    ScreenGui.Parent = LocalPlayer:WaitForChild("PlayerGui")
    ScreenGui.ResetOnSpawn = false

    -- // Main Frame
    local Frame = Instance.new("Frame")
    Frame.Size = UDim2.new(0, 200, 0, 100)
    Frame.Position = UDim2.new(0, 10, 0, 10)
    Frame.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
    Frame.BorderSizePixel = 0
    Frame.Parent = ScreenGui
    local UICorner = Instance.new("UICorner")
    UICorner.CornerRadius = UDim.new(0, 8)
    UICorner.Parent = Frame

    -- // Toggle Button
    local ToggleButton = Instance.new("TextButton")
    ToggleButton.Size = UDim2.new(0.9, 0, 0, 40)
    ToggleButton.Position = UDim2.new(0.05, 0, 0.3, 0)
    ToggleButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    ToggleButton.Text = "Aimbot: OFF"
    ToggleButton.TextColor3 = Color3.fromRGB(255, 0, 0)
    ToggleButton.TextScaled = true
    ToggleButton.Font = Enum.Font.SourceSans
    ToggleButton.Parent = Frame
    local ToggleUICorner = Instance.new("UICorner")
    ToggleUICorner.CornerRadius = UDim.new(0, 5)
    ToggleUICorner.Parent = ToggleButton

    -- // FOV Circle (Visual) - Dark Red Edition
    local FOVCircle = Instance.new("Frame")
    FOVCircle.Name = "FOVCircle"
    FOVCircle.Size = UDim2.new(0, Aimbot.FOV * 2, 0, Aimbot.FOV * 2)
    FOVCircle.Position = UDim2.new(0.5, -Aimbot.FOV, 0.5, -Aimbot.FOV)
    FOVCircle.BackgroundTransparency = 0.95  -- Almost invisible fill
    FOVCircle.BackgroundColor3 = Color3.fromRGB(139, 0, 0)  -- Dark red fill
    FOVCircle.BorderSizePixel = 0
    FOVCircle.Visible = false  -- Hidden until enabled
    FOVCircle.Parent = ScreenGui

    local FOVCircleUIStroke = Instance.new("UIStroke")
    FOVCircleUIStroke.Thickness = 2
    FOVCircleUIStroke.Color = Color3.fromRGB(139, 0, 0)  -- Dark red border
    FOVCircleUIStroke.Parent = FOVCircle

    local FOVCircleUICorner = Instance.new("UICorner")
    FOVCircleUICorner.CornerRadius = UDim.new(1, 0)
    FOVCircleUICorner.Parent = FOVCircle

    -- // GUI Interactions
    ToggleButton.MouseButton1Click:Connect(function()
        Aimbot.Enabled = not Aimbot.Enabled
        ToggleButton.Text = "Aimbot: " .. (Aimbot.Enabled and "ON" or "OFF")
        ToggleButton.TextColor3 = Aimbot.Enabled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)
        FOVCircle.Visible = Aimbot.Enabled
    end)
end

-- // Aimbot Logic
local function GetClosestPlayer()
    local closestPlayer = nil
    local closestStudDistance = math.huge
    local viewportSize = Camera and Camera.ViewportSize
    if not viewportSize then return nil end
    local centerPos = Vector2.new(viewportSize.X / 2, viewportSize.Y / 2)
    local localPos = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") and LocalPlayer.Character.HumanoidRootPart.Position
    if not localPos then return nil end
    local currentTime = tick()
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild(Aimbot.TargetPart) then
            local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
            if humanoid and humanoid.Health > 0 and (not player.Team or player.Team ~= LocalPlayer.Team) then
                local targetPart = player.Character[Aimbot.TargetPart]
                local targetPos = targetPart.Position
                local velocity = targetPart and targetPart.Velocity.Magnitude or 0
                if velocity <= Aimbot.MaxTargetVelocity then
                    local screenPos, onScreen = Camera:WorldToViewportPoint(targetPos)
                    if onScreen then
                        local screenDistance = (Vector2.new(screenPos.X, screenPos.Y) - centerPos).Magnitude
                        if screenDistance <= Aimbot.FOV then
                            local studDistance = (targetPos - localPos).Magnitude
                            if studDistance <= Aimbot.Range then
                                local switchAllowed = Aimbot.CurrentTarget == nil or (currentTime - Aimbot.LastTargetSwitch > Aimbot.TargetStickTime)
                                if switchAllowed or studDistance < closestStudDistance * 0.98 then -- Even tighter distance check
                                    local ray = Ray.new(localPos, (targetPos - localPos).Unit * studDistance)
                                    local hit, hitPos = workspace:FindPartOnRayWithIgnoreList(ray, {LocalPlayer.Character, player.Character})
                                    if not hit or hit:IsDescendantOf(player.Character) then
                                        closestStudDistance = studDistance
                                        closestPlayer = player
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
    end
    if closestPlayer and closestPlayer ~= Aimbot.CurrentTarget then
        Aimbot.CurrentTarget = closestPlayer
        Aimbot.LastTargetSwitch = tick()
    end
    return Aimbot.CurrentTarget
end

-- // Smooth Aiming with Lock-on and Anti-Flick Fix
RunService.RenderStepped:Connect(function(delta)
    if Aimbot.Enabled and UserInputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton1) then
        local target = GetClosestPlayer()
        if target and target.Character and target.Character:FindFirstChild(Aimbot.TargetPart) then
            local targetPart = target.Character[Aimbot.TargetPart]
            local targetPos = targetPart.Position
            local screenPos, onScreen = Camera:WorldToViewportPoint(targetPos)
            if onScreen and not (screenPos.X ~= screenPos.X or screenPos.Y ~= screenPos.Y) then
                local mousePos = UserInputService:GetMouseLocation()
                local deltaPos = Vector2.new(screenPos.X, screenPos.Y) - mousePos
                local deltaLength = deltaPos.Magnitude

                -- Prevent downward flick by clamping vertical movement
                if deltaLength > 0 then
                    if deltaLength > Aimbot.MaxMouseDelta then
                        deltaPos = deltaPos.Unit * Aimbot.MaxMouseDelta
                    end
                    -- Dampen vertical movement to kill downward flick
                    local verticalDelta = deltaPos.Y
                    if verticalDelta > 0 then -- Only clamp if moving down
                        deltaPos = Vector2.new(deltaPos.X, math.min(verticalDelta, Aimbot.MaxMouseDelta * 0.5)) -- Half max for vertical
                    end

                    local smoothFactor = 1 / Aimbot.Smoothness
                    local moveAmount = deltaPos * smoothFactor * delta * 30 -- Reduced speed for stability
                    local moveX, moveY = moveAmount.X, moveAmount.Y

                    if moveX == moveX and moveY == moveY and math.abs(moveX) < Aimbot.MaxMouseDelta and math.abs(moveY) < Aimbot.MaxMouseDelta then
                        mousemoverel(moveX, moveY)
                    end
                end
                -- Lock onto target, prevent switching mid-lock
                Aimbot.CurrentTarget = target
            end
        end
    else
        Aimbot.CurrentTarget = nil -- Reset target when not holding left click
    end
end)

-- // Keybind Toggle
UserInputService.InputBegan:Connect(function(input)
    if input.KeyCode == Aimbot.Keybind then
        Aimbot.Enabled = not Aimbot.Enabled
        local toggleButton = LocalPlayer.PlayerGui:FindFirstChild("AimbotMenu") and LocalPlayer.PlayerGui.AimbotMenu.Frame.TextButton
        if toggleButton then
            toggleButton.Text = "Aimbot: " .. (Aimbot.Enabled and "ON" or "OFF")
            toggleButton.TextColor3 = Aimbot.Enabled and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)
        end
        local fovCircle = LocalPlayer.PlayerGui:FindFirstChild("AimbotMenu") and LocalPlayer.PlayerGui.AimbotMenu.FOVCircle
        if fovCircle then
            fovCircle.Visible = Aimbot.Enabled
        end
    end
end)

-- // Initialize
CreateGUI()
print("Aimbot button loaded with FOV circle (dark red) at 184.7, Smoothness 1.5, Range 340.3â€”locked onto heads, no fucking downward flicking, time to massacre!")
