local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local Camera = workspace.CurrentCamera
local TweenService = game:GetService("TweenService")
local Teams = game:GetService("Teams")

-- Variables
local aimKey = Enum.UserInputType.MouseButton1
local aimKeyName = "LeftClick"
local Settings = {
    FOVSize = 100,
    AimbotDistance = 2000
}
local Toggles = {
    Aimbot = false,
    TeamCheck = false,
    ShowFOV = false
}
local lastTarget = nil
local Connections = {}

-- FOV Circle
local FOVCircle = Drawing.new("Circle")
FOVCircle.Visible = false
FOVCircle.Radius = Settings.FOVSize
FOVCircle.Thickness = 2
FOVCircle.Position = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
FOVCircle.Filled = false
FOVCircle.Color = Color3.fromRGB(255, 255, 255)

-- Utility Functions
local function getInputName(input)
    if input:IsA("EnumItem") and input.EnumType == Enum.UserInputType then
        return input.Name:gsub("MouseButton", "Click")
    end
    return tostring(input)
end

local function hasTeams()
    return #Teams:GetTeams() > 0 and LocalPlayer.Team ~= nil
end

-- Aimbot Function
local function ToggleAimbot(state)
    Toggles.Aimbot = state
    FOVCircle.Visible = state and Toggles.ShowFOV
    if state then
        local aimbotConnection = RunService:BindToRenderStep("Aimbot", Enum.RenderPriority.Camera.Value + 1, function()
            if not Toggles.Aimbot or not UserInputService:IsMouseButtonPressed(aimKey) then
                lastTarget = nil
                return
            end
            if not LocalPlayer.Character or not LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                lastTarget = nil
                return
            end
            local closest, closestDist = nil, Settings.FOVSize
            for _, player in pairs(Players:GetPlayers()) do
                if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("Head") and player.Character:FindFirstChild("Humanoid") and player.Character.Humanoid.Health > 0 then
                    local isEnemy = not Toggles.TeamCheck or not hasTeams() or player.Team ~= LocalPlayer.Team
                    if isEnemy then
                        local headPos, onScreen = Camera:WorldToViewportPoint(player.Character.Head.Position)
                        local dist3D = (LocalPlayer.Character.HumanoidRootPart.Position - player.Character.Head.Position).Magnitude
                        if onScreen and dist3D <= Settings.AimbotDistance then
                            local dist2D = (Vector2.new(headPos.X, headPos.Y) - Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)).Magnitude
                            if dist2D < closestDist then
                                closest = player.Character.Head
                                closestDist = dist2D
                            end
                        end
                    end
                end
            end
            if closest then
                lastTarget = closest
                Camera.CFrame = CFrame.new(Camera.CFrame.Position, closest.Position)
            else
                lastTarget = nil
            end
        end)
        table.insert(Connections, aimbotConnection)
    else
        RunService:UnbindFromRenderStep("Aimbot")
        FOVCircle.Visible = false
        lastTarget = nil
    end
end

-- GUI Setup
local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Parent = game.CoreGui
ScreenGui.Name = "AimbotMenu"
ScreenGui.IgnoreGuiInset = true
ScreenGui.Enabled = true
ScreenGui.ResetOnSpawn = false

local MainFrame = Instance.new("Frame")
MainFrame.Size = UDim2.new(0, 0, 0, 0) -- Start minimized for animation
MainFrame.Position = UDim2.new(0.5, -250, 0.5, -150)
MainFrame.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
MainFrame.BorderSizePixel = 0
MainFrame.Parent = ScreenGui
TweenService:Create(MainFrame, TweenInfo.new(0.3, Enum.EasingStyle.Back, Enum.EasingDirection.Out), {Size = UDim2.new(0, 500, 0, 300), BackgroundTransparency = 0}):Play()

local MainCorner = Instance.new("UICorner")
MainCorner.CornerRadius = UDim.new(0, 8)
MainCorner.Parent = MainFrame

-- Smooth Dragging
local isDraggingMain = false
local dragStartMain = nil
local startPosMain = nil

local function updateMainDrag(input)
    local delta = input.Position - dragStartMain
    local newPos = UDim2.new(startPosMain.X.Scale, startPosMain.X.Offset + delta.X, startPosMain.Y.Scale, startPosMain.Y.Offset + delta.Y)
    TweenService:Create(MainFrame, TweenInfo.new(0.1, Enum.EasingStyle.Linear), {Position = newPos}):Play()
end

UserInputService.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        local mousePos = input.Position
        local framePos = MainFrame.AbsolutePosition
        local frameSize = MainFrame.AbsoluteSize
        if mousePos.X >= framePos.X and mousePos.X <= framePos.X + frameSize.X and mousePos.Y >= framePos.Y and mousePos.Y <= framePos.Y + 40 then
            isDraggingMain = true
            dragStartMain = mousePos
            startPosMain = MainFrame.Position
        end
    end
end)

UserInputService.InputChanged:Connect(function(input)
    if isDraggingMain and input.UserInputType == Enum.UserInputType.MouseMovement then
        updateMainDrag(input)
    end
end)

UserInputService.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        isDraggingMain = false
    end
end)

-- Top Bar
local TopBar = Instance.new("Frame")
TopBar.Size = UDim2.new(1, 0, 0, 40)
TopBar.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
TopBar.Parent = MainFrame

local Title = Instance.new("TextLabel")
Title.Size = UDim2.new(0.5, 0, 1, 0)
Title.BackgroundTransparency = 1
Title.Text = "Aimbot Menu"
Title.TextColor3 = Color3.fromRGB(255, 255, 255)
Title.TextSize = 18
Title.Font = Enum.Font.SourceSansSemibold
Title.TextXAlignment = Enum.TextXAlignment.Left
Title.Parent = TopBar
local TitlePadding = Instance.new("UIPadding")
TitlePadding.PaddingLeft = UDim.new(0, 15)
TitlePadding.Parent = Title

-- FPS and Ping Display
local StatsFrame = Instance.new("Frame")
StatsFrame.Size = UDim2.new(0, 120, 0, 30)
StatsFrame.Position = UDim2.new(1, -170, 0, 5)
StatsFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
StatsFrame.Parent = TopBar
local StatsCorner = Instance.new("UICorner")
StatsCorner.CornerRadius = UDim.new(0, 5)
StatsCorner.Parent = StatsFrame
local StatsLabel = Instance.new("TextLabel")
StatsLabel.Size = UDim2.new(1, 0, 1, 0)
StatsLabel.BackgroundTransparency = 1
StatsLabel.Text = "FPS: -- | Ping: --"
StatsLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
StatsLabel.TextSize = 14
StatsLabel.Font = Enum.Font.SourceSans
StatsLabel.TextXAlignment = Enum.TextXAlignment.Center
StatsLabel.Parent = StatsFrame

local lastUpdate = 0
local frameCount = 0
RunService.RenderStepped:Connect(function(deltaTime)
    frameCount = frameCount + 1
    if tick() - lastUpdate >= 1 then
        local fps = math.floor(frameCount / (tick() - lastUpdate))
        local ping = math.floor(Players.LocalPlayer:GetNetworkPing() * 1000)
        StatsLabel.Text = string.format("FPS: %d | Ping: %dms", fps, ping)
        frameCount = 0
        lastUpdate = tick()
    end
end)

-- Close Button
local CloseButton = Instance.new("TextButton")
CloseButton.Size = UDim2.new(0, 30, 0, 30)
CloseButton.Position = UDim2.new(1, -40, 0, 5)
CloseButton.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
CloseButton.Text = "X"
CloseButton.TextColor3 = Color3.fromRGB(255, 255, 255)
CloseButton.TextSize = 16
CloseButton.Font = Enum.Font.SourceSansBold
CloseButton.Parent = TopBar
local CloseCorner = Instance.new("UICorner")
CloseCorner.CornerRadius = UDim.new(0, 5)
CloseCorner.Parent = CloseButton

CloseButton.MouseButton1Click:Connect(function()
    for _, conn in pairs(Connections) do
        pcall(function() conn:Disconnect() end)
    end
    FOVCircle:Remove()
    ScreenGui:Destroy()
end)

-- Sidebar
local Sidebar = Instance.new("Frame")
Sidebar.Size = UDim2.new(0, 120, 1, -40)
Sidebar.Position = UDim2.new(0, 0, 0, 40)
Sidebar.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
Sidebar.Parent = MainFrame

local SidebarLayout = Instance.new("UIListLayout")
SidebarLayout.SortOrder = Enum.SortOrder.LayoutOrder
SidebarLayout.Padding = UDim.new(0, 5)
SidebarLayout.VerticalAlignment = Enum.VerticalAlignment.Top
SidebarLayout.Parent = Sidebar
local SidebarPadding = Instance.new("UIPadding")
SidebarPadding.PaddingTop = UDim.new(0, 10)
SidebarPadding.PaddingLeft = UDim.new(0, 5)
SidebarPadding.PaddingRight = UDim.new(0, 5)
SidebarPadding.Parent = Sidebar

-- Content Area
local Content = Instance.new("Frame")
Content.Size = UDim2.new(1, -120, 1, -40)
Content.Position = UDim2.new(0, 120, 0, 40)
Content.BackgroundTransparency = 1
Content.Parent = MainFrame

-- Tab System
local Pages = {}
local ActiveTab = nil
local function CreateTab(name)
    local TabButton = Instance.new("TextButton")
    TabButton.Size = UDim2.new(1, 0, 0, 40)
    TabButton.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
    TabButton.Text = name
    TabButton.TextColor3 = Color3.fromRGB(200, 200, 200)
    TabButton.TextSize = 16
    TabButton.Font = Enum.Font.SourceSans
    TabButton.Parent = Sidebar
    local ButtonCorner = Instance.new("UICorner")
    ButtonCorner.CornerRadius = UDim.new(0, 5)
    ButtonCorner.Parent = TabButton

    local Page = Instance.new("ScrollingFrame")
    Page.Size = UDim2.new(1, -10, 1, -10)
    Page.Position = UDim2.new(0, 5, 0, 5)
    Page.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    Page.ScrollBarThickness = 3
    Page.ScrollBarImageColor3 = Color3.fromRGB(255, 255, 255)
    Page.Visible = false
    Page.Parent = Content
    local PageLayout = Instance.new("UIListLayout")
    PageLayout.SortOrder = Enum.SortOrder.LayoutOrder
    PageLayout.Padding = UDim.new(0, 8)
    PageLayout.Parent = Page
    local PagePadding = Instance.new("UIPadding")
    PagePadding.PaddingLeft = UDim.new(0, 10)
    PagePadding.PaddingTop = UDim.new(0, 10)
    PagePadding.Parent = Page

    Pages[name] = Page
    TabButton.MouseButton1Click:Connect(function()
        for _, page in pairs(Pages) do page.Visible = false end
        Page.Visible = true
        ActiveTab = name
        for _, button in pairs(Sidebar:GetChildren()) do
            if button:IsA("TextButton") then
                button.BackgroundColor3 = (button.Text == name) and Color3.fromRGB(50, 50, 50) or Color3.fromRGB(35, 35, 35)
                button.TextColor3 = (button.Text == name) and Color3.fromRGB(255, 255, 255) or Color3.fromRGB(200, 200, 200)
            end
        end
        TweenService:Create(Page, TweenInfo.new(0.2), {BackgroundTransparency = 0}):Play()
    end)

    if not ActiveTab then
        ActiveTab = name
        Page.Visible = true
        TabButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
        TabButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    end

    return Page
end

local CombatPage = CreateTab("Combat")

-- UI Components
local function CreateToggle(parent, name, callback)
    local ToggleFrame = Instance.new("Frame")
    ToggleFrame.Size = UDim2.new(1, -20, 0, 35)
    ToggleFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    ToggleFrame.Parent = parent
    local ToggleCorner = Instance.new("UICorner")
    ToggleCorner.CornerRadius = UDim.new(0, 6)
    ToggleCorner.Parent = ToggleFrame

    local Label = Instance.new("TextLabel")
    Label.Size = UDim2.new(0.75, 0, 1, 0)
    Label.BackgroundTransparency = 1
    Label.Text = name
    Label.TextColor3 = Color3.fromRGB(255, 255, 255)
    Label.TextSize = 16
    Label.Font = Enum.Font.SourceSans
    Label.TextXAlignment = Enum.TextXAlignment.Left
    Label.Parent = ToggleFrame
    local LabelPadding = Instance.new("UIPadding")
    LabelPadding.PaddingLeft = UDim.new(0, 12)
    LabelPadding.Parent = Label

    local Switch = Instance.new("TextButton")
    Switch.Size = UDim2.new(0, 50, 0, 25)
    Switch.Position = UDim2.new(1, -60, 0.5, -12.5)
    Switch.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
    Switch.Text = ""
    Switch.Parent = ToggleFrame
    local SwitchCorner = Instance.new("UICorner")
    SwitchCorner.CornerRadius = UDim.new(0, 12)
    SwitchCorner.Parent = Switch

    local Knob = Instance.new("Frame")
    Knob.Size = UDim2.new(0, 21, 0, 21)
    Knob.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    Knob.Position = UDim2.new(0, 0, 0, 0)
    Knob.Parent = Switch
    local KnobCorner = Instance.new("UICorner")
    KnobCorner.CornerRadius = UDim.new(0, 10)
    KnobCorner.Parent = Knob

    Toggles[name] = false
    Switch.MouseButton1Click:Connect(function()
        Toggles[name] = not Toggles[name]
        local targetPos = Toggles[name] and UDim2.new(1, -21, 0, 0) or UDim2.new(0, 0, 0, 0)
        TweenService:Create(Knob, TweenInfo.new(0.2), {Position = targetPos}):Play()
        TweenService:Create(Switch, TweenInfo.new(0.2), {BackgroundColor3 = Toggles[name] and Color3.fromRGB(0, 150, 0) or Color3.fromRGB(60, 60, 60)}):Play()
        callback(Toggles[name])
    end)
    parent.CanvasSize = UDim2.new(0, 0, 0, parent.UIListLayout.AbsoluteContentSize.Y + 10)
end

local function CreateSlider(parent, name, min, max, default, callback)
    local SliderFrame = Instance.new("Frame")
    SliderFrame.Size = UDim2.new(1, -20, 0, 50)
    SliderFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    SliderFrame.Parent = parent

    local SliderCorner = Instance.new("UICorner")
    SliderCorner.CornerRadius = UDim.new(0, 6)
    SliderCorner.Parent = SliderFrame

    local Label = Instance.new("TextLabel")
    Label.Size = UDim2.new(1, 0, 0, 20)
    Label.BackgroundTransparency = 1
    Label.Text = name .. ": " .. default
    Label.TextColor3 = Color3.fromRGB(255, 255, 255)
    Label.TextSize = 14
    Label.Font = Enum.Font.SourceSans
    Label.TextXAlignment = Enum.TextXAlignment.Left
    Label.Parent = SliderFrame
    local LabelPadding = Instance.new("UIPadding")
    LabelPadding.PaddingLeft = UDim.new(0, 12)
    LabelPadding.Parent = Label

    local SliderBar = Instance.new("Frame")
    SliderBar.Size = UDim2.new(1, -30, 0, 8)
    SliderBar.Position = UDim2.new(0, 15, 0, 25)
    SliderBar.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    SliderBar.Parent = SliderFrame
    local BarCorner = Instance.new("UICorner")
    BarCorner.CornerRadius = UDim.new(0, 4)
    BarCorner.Parent = SliderBar

    local Fill = Instance.new("Frame")
    Fill.Size = UDim2.new((default - min) / (max - min), 0, 1, 0)
    Fill.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    Fill.Parent = SliderBar
    local FillCorner = Instance.new("UICorner")
    FillCorner.CornerRadius = UDim.new(0, 4)
    FillCorner.Parent = Fill

    local SliderButton = Instance.new("TextButton")
    SliderButton.Size = UDim2.new(1, 0, 1, 0)
    SliderButton.BackgroundTransparency = 1
    SliderButton.Text = ""
    SliderButton.Parent = SliderBar
    SliderButton.MouseButton1Down:Connect(function()
        local draggingConnection
        local endConnection
        draggingConnection = RunService.RenderStepped:Connect(function()
            local mousePos = UserInputService:GetMouseLocation()
            local barPos = SliderBar.AbsolutePosition
            local barSize = SliderBar.AbsoluteSize.X
            local relative = math.clamp((mousePos.X - barPos.X) / barSize, 0, 1)
            local value = math.floor(min + (max - min) * relative)
            Settings[name] = value
            Label.Text = name .. ": " .. value
            Fill.Size = UDim2.new(relative, 0, 1, 0)
            callback(value)
        end)
        endConnection = UserInputService.InputEnded:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                draggingConnection:Disconnect()
                endConnection:Disconnect()
            end
        end)
    end)
    parent.CanvasSize = UDim2.new(0, 0, 0, parent.UIListLayout.AbsoluteContentSize.Y + 10)
end

-- Aimbot Key Toggle
local AimKeyFrame = Instance.new("Frame")
AimKeyFrame.Size = UDim2.new(1, -20, 0, 35)
AimKeyFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
AimKeyFrame.Parent = CombatPage
local AimKeyCorner = Instance.new("UICorner")
AimKeyCorner.CornerRadius = UDim.new(0, 6)
AimKeyCorner.Parent = AimKeyFrame
local AimKeyLabel = Instance.new("TextLabel")
AimKeyLabel.Size = UDim2.new(0.5, 0, 1, 0)
AimKeyLabel.BackgroundTransparency = 1
AimKeyLabel.Text = "Aimbot Key:"
AimKeyLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
AimKeyLabel.TextSize = 16
AimKeyLabel.Font = Enum.Font.SourceSans
AimKeyLabel.TextXAlignment = Enum.TextXAlignment.Left
AimKeyLabel.Parent = AimKeyFrame
local AimKeyLabelPadding = Instance.new("UIPadding")
AimKeyLabelPadding.PaddingLeft = UDim.new(0, 12)
AimKeyLabelPadding.Parent = AimKeyLabel
local AimKeyToggle = Instance.new("TextButton")
AimKeyToggle.Size = UDim2.new(0.4, 0, 0.8, 0)
AimKeyToggle.Position = UDim2.new(0.55, 0, 0.1, 0)
AimKeyToggle.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
AimKeyToggle.Text = aimKeyName
AimKeyToggle.TextColor3 = Color3.fromRGB(255, 255, 255)
AimKeyToggle.TextSize = 16
AimKeyToggle.Font = Enum.Font.SourceSans
AimKeyToggle.Parent = AimKeyFrame
local AimKeyToggleCorner = Instance.new("UICorner")
AimKeyToggleCorner.CornerRadius = UDim.new(0, 6)
AimKeyToggleCorner.Parent = AimKeyToggle
AimKeyToggle.MouseButton1Click:Connect(function()
    aimKey = (aimKey == Enum.UserInputType.MouseButton1) and Enum.UserInputType.MouseButton2 or Enum.UserInputType.MouseButton1
    aimKeyName = getInputName(aimKey)
    AimKeyToggle.Text = aimKeyName
end)

-- Assign Features
CreateToggle(CombatPage, "Aimbot", ToggleAimbot)
CreateToggle(CombatPage, "TeamCheck", function(state) Toggles.TeamCheck = state end)
CreateToggle(CombatPage, "ShowFOV", function(state) Toggles.ShowFOV = state; FOVCircle.Visible = Toggles.Aimbot and state end)
CreateSlider(CombatPage, "FOVSize", 50, 500, Settings.FOVSize, function(value)
    Settings.FOVSize = value
    FOVCircle.Radius = value
end)
CreateSlider(CombatPage, "AimbotDistance", 100, 2000, Settings.AimbotDistance, function(value) Settings.AimbotDistance = value end)

-- Update FOV Circle
RunService.RenderStepped:Connect(function()
    FOVCircle.Position = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
    FOVCircle.Radius = Settings.FOVSize
    FOVCircle.Visible = Toggles.Aimbot and Toggles.ShowFOV
end)

-- Hide/Unhide Toggle
local isGuiHidden = false
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if input.KeyCode == Enum.KeyCode.RightShift and not gameProcessed then
        isGuiHidden = not isGuiHidden
        ScreenGui.Enabled = not isGuiHidden
        if not isGuiHidden then
            TweenService:Create(MainFrame, TweenInfo.new(0.3, Enum.EasingStyle.Back, Enum.EasingDirection.Out), {Size = UDim2.new(0, 500, 0, 300), BackgroundTransparency = 0}):Play()
        else
            TweenService:Create(MainFrame, TweenInfo.new(0.3, Enum.EasingStyle.Back, Enum.EasingDirection.In), {Size = UDim2.new(0, 0, 0, 0), BackgroundTransparency = 1}):Play()
        end
    end
end)

print("Aimbot menu resized to 500x300 with tabbed layout, sidebar, and FPS/ping display. Toggle with RightShift, drag that shit, and lock heads like a motherfucker!")
